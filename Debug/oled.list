
oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003700  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  08003888  08003888  00013888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800403c  0800403c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800403c  0800403c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800403c  0800403c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800403c  0800403c  0001403c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004040  08004040  00014040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000504  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000518  20000518  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d2c9  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c6e  00000000  00000000  0002d30d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a38  00000000  00000000  0002ef80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000978  00000000  00000000  0002f9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a39d  00000000  00000000  00030330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000df85  00000000  00000000  0004a6cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ba5b  00000000  00000000  00058652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f40ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002984  00000000  00000000  000f4100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003870 	.word	0x08003870

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08003870 	.word	0x08003870

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
//	char stringArray[] = "Hello oled";
//	char returnValue;
	int isOpen = 0;  // 1 for "Open", 0 for "Closed"
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fc6b 	bl	8000aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f825 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f8e5 	bl	80003a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001de:	f000 f8b3 	bl	8000348 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80001e2:	f000 f871 	bl	80002c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init(); /* Initialize OLED display */
 80001e6:	f000 fa5f 	bl	80006a8 <ssd1306_Init>
//  ssd1306_Fill(White);
//  ssd1306_UpdateScreen();
  ssd1306_SetCursor(5,5);
 80001ea:	2105      	movs	r1, #5
 80001ec:	2005      	movs	r0, #5
 80001ee:	f000 fc13 	bl	8000a18 <ssd1306_SetCursor>
  if(isOpen){
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d006      	beq.n	8000206 <main+0x3e>
	  ssd1306_WriteString("Open", Font_7x10, White);
 80001f8:	4a07      	ldr	r2, [pc, #28]	; (8000218 <main+0x50>)
 80001fa:	2301      	movs	r3, #1
 80001fc:	ca06      	ldmia	r2, {r1, r2}
 80001fe:	4807      	ldr	r0, [pc, #28]	; (800021c <main+0x54>)
 8000200:	f000 fbe4 	bl	80009cc <ssd1306_WriteString>
 8000204:	e005      	b.n	8000212 <main+0x4a>
  }else{
	  ssd1306_WriteString("Closed", Font_7x10, White);
 8000206:	4a04      	ldr	r2, [pc, #16]	; (8000218 <main+0x50>)
 8000208:	2301      	movs	r3, #1
 800020a:	ca06      	ldmia	r2, {r1, r2}
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <main+0x58>)
 800020e:	f000 fbdd 	bl	80009cc <ssd1306_WriteString>
  }
//  returnValue = ssd1306_WriteString(stringArray, Font_7x10, White);
  ssd1306_UpdateScreen();
 8000212:	f000 fad7 	bl	80007c4 <ssd1306_UpdateScreen>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000216:	e7fe      	b.n	8000216 <main+0x4e>
 8000218:	20000004 	.word	0x20000004
 800021c:	08003888 	.word	0x08003888
 8000220:	08003890 	.word	0x08003890

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b096      	sub	sp, #88	; 0x58
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800022e:	2228      	movs	r2, #40	; 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f003 fb14 	bl	8003860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	f107 031c 	add.w	r3, r7, #28
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	60da      	str	r2, [r3, #12]
 8000246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]
 8000256:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000258:	2302      	movs	r3, #2
 800025a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025c:	2301      	movs	r3, #1
 800025e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000260:	2310      	movs	r3, #16
 8000262:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000264:	2300      	movs	r3, #0
 8000266:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000268:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800026c:	4618      	mov	r0, r3
 800026e:	f001 fb9f 	bl	80019b0 <HAL_RCC_OscConfig>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000278:	f000 f8c6 	bl	8000408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027c:	230f      	movs	r3, #15
 800027e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000280:	2300      	movs	r3, #0
 8000282:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000290:	f107 031c 	add.w	r3, r7, #28
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f002 fbc8 	bl	8002a2c <HAL_RCC_ClockConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002a2:	f000 f8b1 	bl	8000408 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80002a6:	2320      	movs	r3, #32
 80002a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002aa:	2300      	movs	r3, #0
 80002ac:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	4618      	mov	r0, r3
 80002b2:	f002 fdf1 	bl	8002e98 <HAL_RCCEx_PeriphCLKConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002bc:	f000 f8a4 	bl	8000408 <Error_Handler>
  }
}
 80002c0:	bf00      	nop
 80002c2:	3758      	adds	r7, #88	; 0x58
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002cc:	4b1b      	ldr	r3, [pc, #108]	; (800033c <MX_I2C1_Init+0x74>)
 80002ce:	4a1c      	ldr	r2, [pc, #112]	; (8000340 <MX_I2C1_Init+0x78>)
 80002d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002d2:	4b1a      	ldr	r3, [pc, #104]	; (800033c <MX_I2C1_Init+0x74>)
 80002d4:	4a1b      	ldr	r2, [pc, #108]	; (8000344 <MX_I2C1_Init+0x7c>)
 80002d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002d8:	4b18      	ldr	r3, [pc, #96]	; (800033c <MX_I2C1_Init+0x74>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002de:	4b17      	ldr	r3, [pc, #92]	; (800033c <MX_I2C1_Init+0x74>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002e4:	4b15      	ldr	r3, [pc, #84]	; (800033c <MX_I2C1_Init+0x74>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002ea:	4b14      	ldr	r3, [pc, #80]	; (800033c <MX_I2C1_Init+0x74>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002f0:	4b12      	ldr	r3, [pc, #72]	; (800033c <MX_I2C1_Init+0x74>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002f6:	4b11      	ldr	r3, [pc, #68]	; (800033c <MX_I2C1_Init+0x74>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002fc:	4b0f      	ldr	r3, [pc, #60]	; (800033c <MX_I2C1_Init+0x74>)
 80002fe:	2200      	movs	r2, #0
 8000300:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000302:	480e      	ldr	r0, [pc, #56]	; (800033c <MX_I2C1_Init+0x74>)
 8000304:	f000 feb4 	bl	8001070 <HAL_I2C_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800030e:	f000 f87b 	bl	8000408 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000312:	2100      	movs	r1, #0
 8000314:	4809      	ldr	r0, [pc, #36]	; (800033c <MX_I2C1_Init+0x74>)
 8000316:	f001 fab3 	bl	8001880 <HAL_I2CEx_ConfigAnalogFilter>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000320:	f000 f872 	bl	8000408 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000324:	2100      	movs	r1, #0
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <MX_I2C1_Init+0x74>)
 8000328:	f001 faf5 	bl	8001916 <HAL_I2CEx_ConfigDigitalFilter>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000332:	f000 f869 	bl	8000408 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000030 	.word	0x20000030
 8000340:	40005400 	.word	0x40005400
 8000344:	2000090e 	.word	0x2000090e

08000348 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800034c:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <MX_USART2_UART_Init+0x58>)
 800034e:	4a15      	ldr	r2, [pc, #84]	; (80003a4 <MX_USART2_UART_Init+0x5c>)
 8000350:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000352:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <MX_USART2_UART_Init+0x58>)
 8000354:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000358:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800035a:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <MX_USART2_UART_Init+0x58>)
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <MX_USART2_UART_Init+0x58>)
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <MX_USART2_UART_Init+0x58>)
 8000368:	2200      	movs	r2, #0
 800036a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <MX_USART2_UART_Init+0x58>)
 800036e:	220c      	movs	r2, #12
 8000370:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <MX_USART2_UART_Init+0x58>)
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <MX_USART2_UART_Init+0x58>)
 800037a:	2200      	movs	r2, #0
 800037c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800037e:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <MX_USART2_UART_Init+0x58>)
 8000380:	2200      	movs	r2, #0
 8000382:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <MX_USART2_UART_Init+0x58>)
 8000386:	2200      	movs	r2, #0
 8000388:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800038a:	4805      	ldr	r0, [pc, #20]	; (80003a0 <MX_USART2_UART_Init+0x58>)
 800038c:	f002 feaa 	bl	80030e4 <HAL_UART_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000396:	f000 f837 	bl	8000408 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000084 	.word	0x20000084
 80003a4:	40004400 	.word	0x40004400

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003ae:	4b15      	ldr	r3, [pc, #84]	; (8000404 <MX_GPIO_Init+0x5c>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	4a14      	ldr	r2, [pc, #80]	; (8000404 <MX_GPIO_Init+0x5c>)
 80003b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003b8:	6153      	str	r3, [r2, #20]
 80003ba:	4b12      	ldr	r3, [pc, #72]	; (8000404 <MX_GPIO_Init+0x5c>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c6:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <MX_GPIO_Init+0x5c>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4a0e      	ldr	r2, [pc, #56]	; (8000404 <MX_GPIO_Init+0x5c>)
 80003cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003d0:	6153      	str	r3, [r2, #20]
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <MX_GPIO_Init+0x5c>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003da:	60bb      	str	r3, [r7, #8]
 80003dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003de:	4b09      	ldr	r3, [pc, #36]	; (8000404 <MX_GPIO_Init+0x5c>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a08      	ldr	r2, [pc, #32]	; (8000404 <MX_GPIO_Init+0x5c>)
 80003e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003e8:	6153      	str	r3, [r2, #20]
 80003ea:	4b06      	ldr	r3, [pc, #24]	; (8000404 <MX_GPIO_Init+0x5c>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003f6:	bf00      	nop
 80003f8:	3714      	adds	r7, #20
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	40021000 	.word	0x40021000

08000408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800040c:	b672      	cpsid	i
}
 800040e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000410:	e7fe      	b.n	8000410 <Error_Handler+0x8>
	...

08000414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <HAL_MspInit+0x44>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	4a0e      	ldr	r2, [pc, #56]	; (8000458 <HAL_MspInit+0x44>)
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	6193      	str	r3, [r2, #24]
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <HAL_MspInit+0x44>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000432:	4b09      	ldr	r3, [pc, #36]	; (8000458 <HAL_MspInit+0x44>)
 8000434:	69db      	ldr	r3, [r3, #28]
 8000436:	4a08      	ldr	r2, [pc, #32]	; (8000458 <HAL_MspInit+0x44>)
 8000438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800043c:	61d3      	str	r3, [r2, #28]
 800043e:	4b06      	ldr	r3, [pc, #24]	; (8000458 <HAL_MspInit+0x44>)
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000446:	603b      	str	r3, [r7, #0]
 8000448:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	40021000 	.word	0x40021000

0800045c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b08a      	sub	sp, #40	; 0x28
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000464:	f107 0314 	add.w	r3, r7, #20
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	605a      	str	r2, [r3, #4]
 800046e:	609a      	str	r2, [r3, #8]
 8000470:	60da      	str	r2, [r3, #12]
 8000472:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a17      	ldr	r2, [pc, #92]	; (80004d8 <HAL_I2C_MspInit+0x7c>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d127      	bne.n	80004ce <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800047e:	4b17      	ldr	r3, [pc, #92]	; (80004dc <HAL_I2C_MspInit+0x80>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a16      	ldr	r2, [pc, #88]	; (80004dc <HAL_I2C_MspInit+0x80>)
 8000484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000488:	6153      	str	r3, [r2, #20]
 800048a:	4b14      	ldr	r3, [pc, #80]	; (80004dc <HAL_I2C_MspInit+0x80>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000492:	613b      	str	r3, [r7, #16]
 8000494:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000496:	23c0      	movs	r3, #192	; 0xc0
 8000498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800049a:	2312      	movs	r3, #18
 800049c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049e:	2300      	movs	r3, #0
 80004a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a2:	2303      	movs	r3, #3
 80004a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80004a6:	2304      	movs	r3, #4
 80004a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004aa:	f107 0314 	add.w	r3, r7, #20
 80004ae:	4619      	mov	r1, r3
 80004b0:	480b      	ldr	r0, [pc, #44]	; (80004e0 <HAL_I2C_MspInit+0x84>)
 80004b2:	f000 fc6b 	bl	8000d8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004b6:	4b09      	ldr	r3, [pc, #36]	; (80004dc <HAL_I2C_MspInit+0x80>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	4a08      	ldr	r2, [pc, #32]	; (80004dc <HAL_I2C_MspInit+0x80>)
 80004bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004c0:	61d3      	str	r3, [r2, #28]
 80004c2:	4b06      	ldr	r3, [pc, #24]	; (80004dc <HAL_I2C_MspInit+0x80>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80004ce:	bf00      	nop
 80004d0:	3728      	adds	r7, #40	; 0x28
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40005400 	.word	0x40005400
 80004dc:	40021000 	.word	0x40021000
 80004e0:	48000400 	.word	0x48000400

080004e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	; 0x28
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a18      	ldr	r2, [pc, #96]	; (8000564 <HAL_UART_MspInit+0x80>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d129      	bne.n	800055a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000506:	4b18      	ldr	r3, [pc, #96]	; (8000568 <HAL_UART_MspInit+0x84>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	4a17      	ldr	r2, [pc, #92]	; (8000568 <HAL_UART_MspInit+0x84>)
 800050c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000510:	61d3      	str	r3, [r2, #28]
 8000512:	4b15      	ldr	r3, [pc, #84]	; (8000568 <HAL_UART_MspInit+0x84>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4b12      	ldr	r3, [pc, #72]	; (8000568 <HAL_UART_MspInit+0x84>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a11      	ldr	r2, [pc, #68]	; (8000568 <HAL_UART_MspInit+0x84>)
 8000524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <HAL_UART_MspInit+0x84>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000536:	f248 0304 	movw	r3, #32772	; 0x8004
 800053a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800053c:	2302      	movs	r3, #2
 800053e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000544:	2303      	movs	r3, #3
 8000546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000548:	2307      	movs	r3, #7
 800054a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054c:	f107 0314 	add.w	r3, r7, #20
 8000550:	4619      	mov	r1, r3
 8000552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000556:	f000 fc19 	bl	8000d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800055a:	bf00      	nop
 800055c:	3728      	adds	r7, #40	; 0x28
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40004400 	.word	0x40004400
 8000568:	40021000 	.word	0x40021000

0800056c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000570:	e7fe      	b.n	8000570 <NMI_Handler+0x4>

08000572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000576:	e7fe      	b.n	8000576 <HardFault_Handler+0x4>

08000578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800057c:	e7fe      	b.n	800057c <MemManage_Handler+0x4>

0800057e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000582:	e7fe      	b.n	8000582 <BusFault_Handler+0x4>

08000584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <UsageFault_Handler+0x4>

0800058a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr

080005a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b8:	f000 fabe 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <SystemInit+0x20>)
 80005c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ca:	4a05      	ldr	r2, [pc, #20]	; (80005e0 <SystemInit+0x20>)
 80005cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800061c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005e8:	f7ff ffea 	bl	80005c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ec:	480c      	ldr	r0, [pc, #48]	; (8000620 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ee:	490d      	ldr	r1, [pc, #52]	; (8000624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005f0:	4a0d      	ldr	r2, [pc, #52]	; (8000628 <LoopForever+0xe>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a0a      	ldr	r2, [pc, #40]	; (800062c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000604:	4c0a      	ldr	r4, [pc, #40]	; (8000630 <LoopForever+0x16>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000612:	f003 f901 	bl	8003818 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000616:	f7ff fdd7 	bl	80001c8 <main>

0800061a <LoopForever>:

LoopForever:
    b LoopForever
 800061a:	e7fe      	b.n	800061a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800061c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000624:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000628:	08004044 	.word	0x08004044
  ldr r2, =_sbss
 800062c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000630:	20000518 	.word	0x20000518

08000634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000634:	e7fe      	b.n	8000634 <ADC1_2_IRQHandler>

08000636 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af04      	add	r7, sp, #16
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
 8000652:	9302      	str	r3, [sp, #8]
 8000654:	2301      	movs	r3, #1
 8000656:	9301      	str	r3, [sp, #4]
 8000658:	1dfb      	adds	r3, r7, #7
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	2301      	movs	r3, #1
 800065e:	2200      	movs	r2, #0
 8000660:	2178      	movs	r1, #120	; 0x78
 8000662:	4803      	ldr	r0, [pc, #12]	; (8000670 <ssd1306_WriteCommand+0x2c>)
 8000664:	f000 fd94 	bl	8001190 <HAL_I2C_Mem_Write>
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000030 	.word	0x20000030

08000674 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af04      	add	r7, sp, #16
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	b29b      	uxth	r3, r3
 8000682:	f04f 32ff 	mov.w	r2, #4294967295
 8000686:	9202      	str	r2, [sp, #8]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2301      	movs	r3, #1
 8000690:	2240      	movs	r2, #64	; 0x40
 8000692:	2178      	movs	r1, #120	; 0x78
 8000694:	4803      	ldr	r0, [pc, #12]	; (80006a4 <ssd1306_WriteData+0x30>)
 8000696:	f000 fd7b 	bl	8001190 <HAL_I2C_Mem_Write>
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000030 	.word	0x20000030

080006a8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80006ac:	f7ff ffc3 	bl	8000636 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80006b0:	2064      	movs	r0, #100	; 0x64
 80006b2:	f000 fa61 	bl	8000b78 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80006b6:	2000      	movs	r0, #0
 80006b8:	f000 f9da 	bl	8000a70 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80006bc:	2020      	movs	r0, #32
 80006be:	f7ff ffc1 	bl	8000644 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80006c2:	2000      	movs	r0, #0
 80006c4:	f7ff ffbe 	bl	8000644 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80006c8:	20b0      	movs	r0, #176	; 0xb0
 80006ca:	f7ff ffbb 	bl	8000644 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80006ce:	20c8      	movs	r0, #200	; 0xc8
 80006d0:	f7ff ffb8 	bl	8000644 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80006d4:	2000      	movs	r0, #0
 80006d6:	f7ff ffb5 	bl	8000644 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80006da:	2010      	movs	r0, #16
 80006dc:	f7ff ffb2 	bl	8000644 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80006e0:	2040      	movs	r0, #64	; 0x40
 80006e2:	f7ff ffaf 	bl	8000644 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80006e6:	20ff      	movs	r0, #255	; 0xff
 80006e8:	f000 f9ae 	bl	8000a48 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80006ec:	20a1      	movs	r0, #161	; 0xa1
 80006ee:	f7ff ffa9 	bl	8000644 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80006f2:	20a6      	movs	r0, #166	; 0xa6
 80006f4:	f7ff ffa6 	bl	8000644 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80006f8:	20a8      	movs	r0, #168	; 0xa8
 80006fa:	f7ff ffa3 	bl	8000644 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80006fe:	203f      	movs	r0, #63	; 0x3f
 8000700:	f7ff ffa0 	bl	8000644 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000704:	20a4      	movs	r0, #164	; 0xa4
 8000706:	f7ff ff9d 	bl	8000644 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800070a:	20d3      	movs	r0, #211	; 0xd3
 800070c:	f7ff ff9a 	bl	8000644 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff ff97 	bl	8000644 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000716:	20d5      	movs	r0, #213	; 0xd5
 8000718:	f7ff ff94 	bl	8000644 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800071c:	20f0      	movs	r0, #240	; 0xf0
 800071e:	f7ff ff91 	bl	8000644 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000722:	20d9      	movs	r0, #217	; 0xd9
 8000724:	f7ff ff8e 	bl	8000644 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000728:	2022      	movs	r0, #34	; 0x22
 800072a:	f7ff ff8b 	bl	8000644 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800072e:	20da      	movs	r0, #218	; 0xda
 8000730:	f7ff ff88 	bl	8000644 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000734:	2012      	movs	r0, #18
 8000736:	f7ff ff85 	bl	8000644 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800073a:	20db      	movs	r0, #219	; 0xdb
 800073c:	f7ff ff82 	bl	8000644 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000740:	2020      	movs	r0, #32
 8000742:	f7ff ff7f 	bl	8000644 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000746:	208d      	movs	r0, #141	; 0x8d
 8000748:	f7ff ff7c 	bl	8000644 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800074c:	2014      	movs	r0, #20
 800074e:	f7ff ff79 	bl	8000644 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000752:	2001      	movs	r0, #1
 8000754:	f000 f98c 	bl	8000a70 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000758:	2000      	movs	r0, #0
 800075a:	f000 f80f 	bl	800077c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800075e:	f000 f831 	bl	80007c4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000762:	4b05      	ldr	r3, [pc, #20]	; (8000778 <ssd1306_Init+0xd0>)
 8000764:	2200      	movs	r2, #0
 8000766:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000768:	4b03      	ldr	r3, [pc, #12]	; (8000778 <ssd1306_Init+0xd0>)
 800076a:	2200      	movs	r2, #0
 800076c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800076e:	4b02      	ldr	r3, [pc, #8]	; (8000778 <ssd1306_Init+0xd0>)
 8000770:	2201      	movs	r2, #1
 8000772:	711a      	strb	r2, [r3, #4]
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	2000050c 	.word	0x2000050c

0800077c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	e00d      	b.n	80007a8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d101      	bne.n	8000796 <ssd1306_Fill+0x1a>
 8000792:	2100      	movs	r1, #0
 8000794:	e000      	b.n	8000798 <ssd1306_Fill+0x1c>
 8000796:	21ff      	movs	r1, #255	; 0xff
 8000798:	4a09      	ldr	r2, [pc, #36]	; (80007c0 <ssd1306_Fill+0x44>)
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	4413      	add	r3, r2
 800079e:	460a      	mov	r2, r1
 80007a0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	3301      	adds	r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007ae:	d3ed      	bcc.n	800078c <ssd1306_Fill+0x10>
    }
}
 80007b0:	bf00      	nop
 80007b2:	bf00      	nop
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	2000010c 	.word	0x2000010c

080007c4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80007ca:	2300      	movs	r3, #0
 80007cc:	71fb      	strb	r3, [r7, #7]
 80007ce:	e016      	b.n	80007fe <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	3b50      	subs	r3, #80	; 0x50
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ff34 	bl	8000644 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80007dc:	2000      	movs	r0, #0
 80007de:	f7ff ff31 	bl	8000644 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80007e2:	2010      	movs	r0, #16
 80007e4:	f7ff ff2e 	bl	8000644 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	01db      	lsls	r3, r3, #7
 80007ec:	4a08      	ldr	r2, [pc, #32]	; (8000810 <ssd1306_UpdateScreen+0x4c>)
 80007ee:	4413      	add	r3, r2
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff3e 	bl	8000674 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	3301      	adds	r3, #1
 80007fc:	71fb      	strb	r3, [r7, #7]
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	2b07      	cmp	r3, #7
 8000802:	d9e5      	bls.n	80007d0 <ssd1306_UpdateScreen+0xc>
    }
}
 8000804:	bf00      	nop
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000010c 	.word	0x2000010c

08000814 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
 800081e:	460b      	mov	r3, r1
 8000820:	71bb      	strb	r3, [r7, #6]
 8000822:	4613      	mov	r3, r2
 8000824:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	2b00      	cmp	r3, #0
 800082c:	db3d      	blt.n	80008aa <ssd1306_DrawPixel+0x96>
 800082e:	79bb      	ldrb	r3, [r7, #6]
 8000830:	2b3f      	cmp	r3, #63	; 0x3f
 8000832:	d83a      	bhi.n	80008aa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000834:	797b      	ldrb	r3, [r7, #5]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d11a      	bne.n	8000870 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800083a:	79fa      	ldrb	r2, [r7, #7]
 800083c:	79bb      	ldrb	r3, [r7, #6]
 800083e:	08db      	lsrs	r3, r3, #3
 8000840:	b2d8      	uxtb	r0, r3
 8000842:	4603      	mov	r3, r0
 8000844:	01db      	lsls	r3, r3, #7
 8000846:	4413      	add	r3, r2
 8000848:	4a1b      	ldr	r2, [pc, #108]	; (80008b8 <ssd1306_DrawPixel+0xa4>)
 800084a:	5cd3      	ldrb	r3, [r2, r3]
 800084c:	b25a      	sxtb	r2, r3
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	f003 0307 	and.w	r3, r3, #7
 8000854:	2101      	movs	r1, #1
 8000856:	fa01 f303 	lsl.w	r3, r1, r3
 800085a:	b25b      	sxtb	r3, r3
 800085c:	4313      	orrs	r3, r2
 800085e:	b259      	sxtb	r1, r3
 8000860:	79fa      	ldrb	r2, [r7, #7]
 8000862:	4603      	mov	r3, r0
 8000864:	01db      	lsls	r3, r3, #7
 8000866:	4413      	add	r3, r2
 8000868:	b2c9      	uxtb	r1, r1
 800086a:	4a13      	ldr	r2, [pc, #76]	; (80008b8 <ssd1306_DrawPixel+0xa4>)
 800086c:	54d1      	strb	r1, [r2, r3]
 800086e:	e01d      	b.n	80008ac <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000870:	79fa      	ldrb	r2, [r7, #7]
 8000872:	79bb      	ldrb	r3, [r7, #6]
 8000874:	08db      	lsrs	r3, r3, #3
 8000876:	b2d8      	uxtb	r0, r3
 8000878:	4603      	mov	r3, r0
 800087a:	01db      	lsls	r3, r3, #7
 800087c:	4413      	add	r3, r2
 800087e:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <ssd1306_DrawPixel+0xa4>)
 8000880:	5cd3      	ldrb	r3, [r2, r3]
 8000882:	b25a      	sxtb	r2, r3
 8000884:	79bb      	ldrb	r3, [r7, #6]
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	2101      	movs	r1, #1
 800088c:	fa01 f303 	lsl.w	r3, r1, r3
 8000890:	b25b      	sxtb	r3, r3
 8000892:	43db      	mvns	r3, r3
 8000894:	b25b      	sxtb	r3, r3
 8000896:	4013      	ands	r3, r2
 8000898:	b259      	sxtb	r1, r3
 800089a:	79fa      	ldrb	r2, [r7, #7]
 800089c:	4603      	mov	r3, r0
 800089e:	01db      	lsls	r3, r3, #7
 80008a0:	4413      	add	r3, r2
 80008a2:	b2c9      	uxtb	r1, r1
 80008a4:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <ssd1306_DrawPixel+0xa4>)
 80008a6:	54d1      	strb	r1, [r2, r3]
 80008a8:	e000      	b.n	80008ac <ssd1306_DrawPixel+0x98>
        return;
 80008aa:	bf00      	nop
    }
}
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	2000010c 	.word	0x2000010c

080008bc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b089      	sub	sp, #36	; 0x24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4604      	mov	r4, r0
 80008c4:	1d38      	adds	r0, r7, #4
 80008c6:	e880 0006 	stmia.w	r0, {r1, r2}
 80008ca:	461a      	mov	r2, r3
 80008cc:	4623      	mov	r3, r4
 80008ce:	73fb      	strb	r3, [r7, #15]
 80008d0:	4613      	mov	r3, r2
 80008d2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	2b1f      	cmp	r3, #31
 80008d8:	d902      	bls.n	80008e0 <ssd1306_WriteChar+0x24>
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	2b7e      	cmp	r3, #126	; 0x7e
 80008de:	d901      	bls.n	80008e4 <ssd1306_WriteChar+0x28>
        return 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	e06d      	b.n	80009c0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80008e4:	4b38      	ldr	r3, [pc, #224]	; (80009c8 <ssd1306_WriteChar+0x10c>)
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	793b      	ldrb	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	2b80      	cmp	r3, #128	; 0x80
 80008f0:	dc06      	bgt.n	8000900 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80008f2:	4b35      	ldr	r3, [pc, #212]	; (80009c8 <ssd1306_WriteChar+0x10c>)
 80008f4:	885b      	ldrh	r3, [r3, #2]
 80008f6:	461a      	mov	r2, r3
 80008f8:	797b      	ldrb	r3, [r7, #5]
 80008fa:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80008fc:	2b40      	cmp	r3, #64	; 0x40
 80008fe:	dd01      	ble.n	8000904 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000900:	2300      	movs	r3, #0
 8000902:	e05d      	b.n	80009c0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
 8000908:	e04c      	b.n	80009a4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	7bfb      	ldrb	r3, [r7, #15]
 800090e:	3b20      	subs	r3, #32
 8000910:	7979      	ldrb	r1, [r7, #5]
 8000912:	fb01 f303 	mul.w	r3, r1, r3
 8000916:	4619      	mov	r1, r3
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	440b      	add	r3, r1
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	4413      	add	r3, r2
 8000920:	881b      	ldrh	r3, [r3, #0]
 8000922:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000924:	2300      	movs	r3, #0
 8000926:	61bb      	str	r3, [r7, #24]
 8000928:	e034      	b.n	8000994 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800092a:	697a      	ldr	r2, [r7, #20]
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000936:	2b00      	cmp	r3, #0
 8000938:	d012      	beq.n	8000960 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800093a:	4b23      	ldr	r3, [pc, #140]	; (80009c8 <ssd1306_WriteChar+0x10c>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	b2da      	uxtb	r2, r3
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	4413      	add	r3, r2
 8000946:	b2d8      	uxtb	r0, r3
 8000948:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <ssd1306_WriteChar+0x10c>)
 800094a:	885b      	ldrh	r3, [r3, #2]
 800094c:	b2da      	uxtb	r2, r3
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	4413      	add	r3, r2
 8000954:	b2db      	uxtb	r3, r3
 8000956:	7bba      	ldrb	r2, [r7, #14]
 8000958:	4619      	mov	r1, r3
 800095a:	f7ff ff5b 	bl	8000814 <ssd1306_DrawPixel>
 800095e:	e016      	b.n	800098e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000960:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <ssd1306_WriteChar+0x10c>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	b2da      	uxtb	r2, r3
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4413      	add	r3, r2
 800096c:	b2d8      	uxtb	r0, r3
 800096e:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <ssd1306_WriteChar+0x10c>)
 8000970:	885b      	ldrh	r3, [r3, #2]
 8000972:	b2da      	uxtb	r2, r3
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	b2db      	uxtb	r3, r3
 8000978:	4413      	add	r3, r2
 800097a:	b2d9      	uxtb	r1, r3
 800097c:	7bbb      	ldrb	r3, [r7, #14]
 800097e:	2b00      	cmp	r3, #0
 8000980:	bf0c      	ite	eq
 8000982:	2301      	moveq	r3, #1
 8000984:	2300      	movne	r3, #0
 8000986:	b2db      	uxtb	r3, r3
 8000988:	461a      	mov	r2, r3
 800098a:	f7ff ff43 	bl	8000814 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	3301      	adds	r3, #1
 8000992:	61bb      	str	r3, [r7, #24]
 8000994:	793b      	ldrb	r3, [r7, #4]
 8000996:	461a      	mov	r2, r3
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	4293      	cmp	r3, r2
 800099c:	d3c5      	bcc.n	800092a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3301      	adds	r3, #1
 80009a2:	61fb      	str	r3, [r7, #28]
 80009a4:	797b      	ldrb	r3, [r7, #5]
 80009a6:	461a      	mov	r2, r3
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d3ad      	bcc.n	800090a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <ssd1306_WriteChar+0x10c>)
 80009b0:	881a      	ldrh	r2, [r3, #0]
 80009b2:	793b      	ldrb	r3, [r7, #4]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	4413      	add	r3, r2
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <ssd1306_WriteChar+0x10c>)
 80009bc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80009be:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3724      	adds	r7, #36	; 0x24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd90      	pop	{r4, r7, pc}
 80009c8:	2000050c 	.word	0x2000050c

080009cc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	1d38      	adds	r0, r7, #4
 80009d6:	e880 0006 	stmia.w	r0, {r1, r2}
 80009da:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80009dc:	e012      	b.n	8000a04 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	7818      	ldrb	r0, [r3, #0]
 80009e2:	78fb      	ldrb	r3, [r7, #3]
 80009e4:	1d3a      	adds	r2, r7, #4
 80009e6:	ca06      	ldmia	r2, {r1, r2}
 80009e8:	f7ff ff68 	bl	80008bc <ssd1306_WriteChar>
 80009ec:	4603      	mov	r3, r0
 80009ee:	461a      	mov	r2, r3
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d002      	beq.n	80009fe <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	e008      	b.n	8000a10 <ssd1306_WriteString+0x44>
        }
        str++;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	3301      	adds	r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1e8      	bne.n	80009de <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	781b      	ldrb	r3, [r3, #0]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	460a      	mov	r2, r1
 8000a22:	71fb      	strb	r3, [r7, #7]
 8000a24:	4613      	mov	r3, r2
 8000a26:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <ssd1306_SetCursor+0x2c>)
 8000a2e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000a30:	79bb      	ldrb	r3, [r7, #6]
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <ssd1306_SetCursor+0x2c>)
 8000a36:	805a      	strh	r2, [r3, #2]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	2000050c 	.word	0x2000050c

08000a48 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000a52:	2381      	movs	r3, #129	; 0x81
 8000a54:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fdf3 	bl	8000644 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fdef 	bl	8000644 <ssd1306_WriteCommand>
}
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d005      	beq.n	8000a8c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000a80:	23af      	movs	r3, #175	; 0xaf
 8000a82:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <ssd1306_SetDisplayOn+0x38>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	715a      	strb	r2, [r3, #5]
 8000a8a:	e004      	b.n	8000a96 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000a8c:	23ae      	movs	r3, #174	; 0xae
 8000a8e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <ssd1306_SetDisplayOn+0x38>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fdd3 	bl	8000644 <ssd1306_WriteCommand>
}
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000050c 	.word	0x2000050c

08000aac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <HAL_Init+0x28>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <HAL_Init+0x28>)
 8000ab6:	f043 0310 	orr.w	r3, r3, #16
 8000aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 f931 	bl	8000d24 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f000 f808 	bl	8000ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac8:	f7ff fca4 	bl	8000414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40022000 	.word	0x40022000

08000ad8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_InitTick+0x54>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_InitTick+0x58>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f93b 	bl	8000d72 <HAL_SYSTICK_Config>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00e      	b.n	8000b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b0f      	cmp	r3, #15
 8000b0a:	d80a      	bhi.n	8000b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f000 f911 	bl	8000d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <HAL_InitTick+0x5c>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e000      	b.n	8000b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	20000010 	.word	0x20000010
 8000b34:	2000000c 	.word	0x2000000c

08000b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_IncTick+0x20>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x24>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <HAL_IncTick+0x24>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000010 	.word	0x20000010
 8000b5c:	20000514 	.word	0x20000514

08000b60 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <HAL_GetTick+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000514 	.word	0x20000514

08000b78 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b80:	f7ff ffee 	bl	8000b60 <HAL_GetTick>
 8000b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b90:	d005      	beq.n	8000b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <HAL_Delay+0x44>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b9e:	bf00      	nop
 8000ba0:	f7ff ffde 	bl	8000b60 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d8f7      	bhi.n	8000ba0 <HAL_Delay+0x28>
  {
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000010 	.word	0x20000010

08000bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf2:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	60d3      	str	r3, [r2, #12]
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <__NVIC_GetPriorityGrouping+0x18>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	f003 0307 	and.w	r3, r3, #7
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	db0a      	blt.n	8000c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	490c      	ldr	r1, [pc, #48]	; (8000c70 <__NVIC_SetPriority+0x4c>)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	0112      	lsls	r2, r2, #4
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	440b      	add	r3, r1
 8000c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c4c:	e00a      	b.n	8000c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4908      	ldr	r1, [pc, #32]	; (8000c74 <__NVIC_SetPriority+0x50>)
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	3b04      	subs	r3, #4
 8000c5c:	0112      	lsls	r2, r2, #4
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	440b      	add	r3, r1
 8000c62:	761a      	strb	r2, [r3, #24]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000e100 	.word	0xe000e100
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b089      	sub	sp, #36	; 0x24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	f1c3 0307 	rsb	r3, r3, #7
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	bf28      	it	cs
 8000c96:	2304      	movcs	r3, #4
 8000c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	2b06      	cmp	r3, #6
 8000ca0:	d902      	bls.n	8000ca8 <NVIC_EncodePriority+0x30>
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3b03      	subs	r3, #3
 8000ca6:	e000      	b.n	8000caa <NVIC_EncodePriority+0x32>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	401a      	ands	r2, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cca:	43d9      	mvns	r1, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	4313      	orrs	r3, r2
         );
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3724      	adds	r7, #36	; 0x24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
	...

08000ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf0:	d301      	bcc.n	8000cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e00f      	b.n	8000d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <SysTick_Config+0x40>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfe:	210f      	movs	r1, #15
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f7ff ff8e 	bl	8000c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <SysTick_Config+0x40>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0e:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <SysTick_Config+0x40>)
 8000d10:	2207      	movs	r2, #7
 8000d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	e000e010 	.word	0xe000e010

08000d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff ff47 	bl	8000bc0 <__NVIC_SetPriorityGrouping>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b086      	sub	sp, #24
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	4603      	mov	r3, r0
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]
 8000d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d4c:	f7ff ff5c 	bl	8000c08 <__NVIC_GetPriorityGrouping>
 8000d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	68b9      	ldr	r1, [r7, #8]
 8000d56:	6978      	ldr	r0, [r7, #20]
 8000d58:	f7ff ff8e 	bl	8000c78 <NVIC_EncodePriority>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d62:	4611      	mov	r1, r2
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff5d 	bl	8000c24 <__NVIC_SetPriority>
}
 8000d6a:	bf00      	nop
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ffb0 	bl	8000ce0 <SysTick_Config>
 8000d80:	4603      	mov	r3, r0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b087      	sub	sp, #28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d9a:	e14e      	b.n	800103a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	2101      	movs	r1, #1
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	fa01 f303 	lsl.w	r3, r1, r3
 8000da8:	4013      	ands	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 8140 	beq.w	8001034 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d005      	beq.n	8000dcc <HAL_GPIO_Init+0x40>
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0303 	and.w	r3, r3, #3
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d130      	bne.n	8000e2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e02:	2201      	movs	r2, #1
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	091b      	lsrs	r3, r3, #4
 8000e18:	f003 0201 	and.w	r2, r3, #1
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	d017      	beq.n	8000e6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	2203      	movs	r2, #3
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	689a      	ldr	r2, [r3, #8]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d123      	bne.n	8000ebe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	08da      	lsrs	r2, r3, #3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3208      	adds	r2, #8
 8000e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	220f      	movs	r2, #15
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	691a      	ldr	r2, [r3, #16]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	f003 0307 	and.w	r3, r3, #7
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	08da      	lsrs	r2, r3, #3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3208      	adds	r2, #8
 8000eb8:	6939      	ldr	r1, [r7, #16]
 8000eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0203 	and.w	r2, r3, #3
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 809a 	beq.w	8001034 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f00:	4b55      	ldr	r3, [pc, #340]	; (8001058 <HAL_GPIO_Init+0x2cc>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a54      	ldr	r2, [pc, #336]	; (8001058 <HAL_GPIO_Init+0x2cc>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b52      	ldr	r3, [pc, #328]	; (8001058 <HAL_GPIO_Init+0x2cc>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f18:	4a50      	ldr	r2, [pc, #320]	; (800105c <HAL_GPIO_Init+0x2d0>)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	3302      	adds	r3, #2
 8000f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	220f      	movs	r2, #15
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f42:	d013      	beq.n	8000f6c <HAL_GPIO_Init+0x1e0>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a46      	ldr	r2, [pc, #280]	; (8001060 <HAL_GPIO_Init+0x2d4>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d00d      	beq.n	8000f68 <HAL_GPIO_Init+0x1dc>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a45      	ldr	r2, [pc, #276]	; (8001064 <HAL_GPIO_Init+0x2d8>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d007      	beq.n	8000f64 <HAL_GPIO_Init+0x1d8>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a44      	ldr	r2, [pc, #272]	; (8001068 <HAL_GPIO_Init+0x2dc>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d101      	bne.n	8000f60 <HAL_GPIO_Init+0x1d4>
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e006      	b.n	8000f6e <HAL_GPIO_Init+0x1e2>
 8000f60:	2305      	movs	r3, #5
 8000f62:	e004      	b.n	8000f6e <HAL_GPIO_Init+0x1e2>
 8000f64:	2302      	movs	r3, #2
 8000f66:	e002      	b.n	8000f6e <HAL_GPIO_Init+0x1e2>
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e000      	b.n	8000f6e <HAL_GPIO_Init+0x1e2>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	f002 0203 	and.w	r2, r2, #3
 8000f74:	0092      	lsls	r2, r2, #2
 8000f76:	4093      	lsls	r3, r2
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f7e:	4937      	ldr	r1, [pc, #220]	; (800105c <HAL_GPIO_Init+0x2d0>)
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3302      	adds	r3, #2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f8c:	4b37      	ldr	r3, [pc, #220]	; (800106c <HAL_GPIO_Init+0x2e0>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	43db      	mvns	r3, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fb0:	4a2e      	ldr	r2, [pc, #184]	; (800106c <HAL_GPIO_Init+0x2e0>)
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fb6:	4b2d      	ldr	r3, [pc, #180]	; (800106c <HAL_GPIO_Init+0x2e0>)
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fda:	4a24      	ldr	r2, [pc, #144]	; (800106c <HAL_GPIO_Init+0x2e0>)
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fe0:	4b22      	ldr	r3, [pc, #136]	; (800106c <HAL_GPIO_Init+0x2e0>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001004:	4a19      	ldr	r2, [pc, #100]	; (800106c <HAL_GPIO_Init+0x2e0>)
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <HAL_GPIO_Init+0x2e0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800102e:	4a0f      	ldr	r2, [pc, #60]	; (800106c <HAL_GPIO_Init+0x2e0>)
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	3301      	adds	r3, #1
 8001038:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	fa22 f303 	lsr.w	r3, r2, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	f47f aea9 	bne.w	8000d9c <HAL_GPIO_Init+0x10>
  }
}
 800104a:	bf00      	nop
 800104c:	bf00      	nop
 800104e:	371c      	adds	r7, #28
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	40021000 	.word	0x40021000
 800105c:	40010000 	.word	0x40010000
 8001060:	48000400 	.word	0x48000400
 8001064:	48000800 	.word	0x48000800
 8001068:	48000c00 	.word	0x48000c00
 800106c:	40010400 	.word	0x40010400

08001070 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e081      	b.n	8001186 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d106      	bne.n	800109c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff f9e0 	bl	800045c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2224      	movs	r2, #36	; 0x24
 80010a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f022 0201 	bic.w	r2, r2, #1
 80010b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d107      	bne.n	80010ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	e006      	b.n	80010f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80010f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d104      	bne.n	800110a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001108:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6812      	ldr	r2, [r2, #0]
 8001114:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800111c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	68da      	ldr	r2, [r3, #12]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800112c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	691a      	ldr	r2, [r3, #16]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	430a      	orrs	r2, r1
 8001146:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69d9      	ldr	r1, [r3, #28]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a1a      	ldr	r2, [r3, #32]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	430a      	orrs	r2, r1
 8001156:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 0201 	orr.w	r2, r2, #1
 8001166:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2220      	movs	r2, #32
 8001172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	4608      	mov	r0, r1
 800119a:	4611      	mov	r1, r2
 800119c:	461a      	mov	r2, r3
 800119e:	4603      	mov	r3, r0
 80011a0:	817b      	strh	r3, [r7, #10]
 80011a2:	460b      	mov	r3, r1
 80011a4:	813b      	strh	r3, [r7, #8]
 80011a6:	4613      	mov	r3, r2
 80011a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b20      	cmp	r3, #32
 80011b4:	f040 80f9 	bne.w	80013aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80011b8:	6a3b      	ldr	r3, [r7, #32]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d002      	beq.n	80011c4 <HAL_I2C_Mem_Write+0x34>
 80011be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d105      	bne.n	80011d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e0ed      	b.n	80013ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d101      	bne.n	80011de <HAL_I2C_Mem_Write+0x4e>
 80011da:	2302      	movs	r3, #2
 80011dc:	e0e6      	b.n	80013ac <HAL_I2C_Mem_Write+0x21c>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2201      	movs	r2, #1
 80011e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011e6:	f7ff fcbb 	bl	8000b60 <HAL_GetTick>
 80011ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2319      	movs	r3, #25
 80011f2:	2201      	movs	r2, #1
 80011f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	f000 f955 	bl	80014a8 <I2C_WaitOnFlagUntilTimeout>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e0d1      	b.n	80013ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2221      	movs	r2, #33	; 0x21
 800120c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2240      	movs	r2, #64	; 0x40
 8001214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2200      	movs	r2, #0
 800121c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6a3a      	ldr	r2, [r7, #32]
 8001222:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001228:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2200      	movs	r2, #0
 800122e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001230:	88f8      	ldrh	r0, [r7, #6]
 8001232:	893a      	ldrh	r2, [r7, #8]
 8001234:	8979      	ldrh	r1, [r7, #10]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	4603      	mov	r3, r0
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f000 f8b9 	bl	80013b8 <I2C_RequestMemoryWrite>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d005      	beq.n	8001258 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e0a9      	b.n	80013ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800125c:	b29b      	uxth	r3, r3
 800125e:	2bff      	cmp	r3, #255	; 0xff
 8001260:	d90e      	bls.n	8001280 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	22ff      	movs	r2, #255	; 0xff
 8001266:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800126c:	b2da      	uxtb	r2, r3
 800126e:	8979      	ldrh	r1, [r7, #10]
 8001270:	2300      	movs	r3, #0
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f000 facf 	bl	800181c <I2C_TransferConfig>
 800127e:	e00f      	b.n	80012a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001284:	b29a      	uxth	r2, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800128e:	b2da      	uxtb	r2, r3
 8001290:	8979      	ldrh	r1, [r7, #10]
 8001292:	2300      	movs	r3, #0
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f000 fabe 	bl	800181c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012a0:	697a      	ldr	r2, [r7, #20]
 80012a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	f000 f94e 	bl	8001546 <I2C_WaitOnTXISFlagUntilTimeout>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e07b      	b.n	80013ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b8:	781a      	ldrb	r2, [r3, #0]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	3b01      	subs	r3, #1
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012dc:	3b01      	subs	r3, #1
 80012de:	b29a      	uxth	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d034      	beq.n	8001358 <HAL_I2C_Mem_Write+0x1c8>
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d130      	bne.n	8001358 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fc:	2200      	movs	r2, #0
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	68f8      	ldr	r0, [r7, #12]
 8001302:	f000 f8d1 	bl	80014a8 <I2C_WaitOnFlagUntilTimeout>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e04d      	b.n	80013ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001314:	b29b      	uxth	r3, r3
 8001316:	2bff      	cmp	r3, #255	; 0xff
 8001318:	d90e      	bls.n	8001338 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	22ff      	movs	r2, #255	; 0xff
 800131e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001324:	b2da      	uxtb	r2, r3
 8001326:	8979      	ldrh	r1, [r7, #10]
 8001328:	2300      	movs	r3, #0
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001330:	68f8      	ldr	r0, [r7, #12]
 8001332:	f000 fa73 	bl	800181c <I2C_TransferConfig>
 8001336:	e00f      	b.n	8001358 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800133c:	b29a      	uxth	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001346:	b2da      	uxtb	r2, r3
 8001348:	8979      	ldrh	r1, [r7, #10]
 800134a:	2300      	movs	r3, #0
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f000 fa62 	bl	800181c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800135c:	b29b      	uxth	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d19e      	bne.n	80012a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f000 f934 	bl	80015d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e01a      	b.n	80013ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2220      	movs	r2, #32
 800137c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6859      	ldr	r1, [r3, #4]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_I2C_Mem_Write+0x224>)
 800138a:	400b      	ands	r3, r1
 800138c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2220      	movs	r2, #32
 8001392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e000      	b.n	80013ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80013aa:	2302      	movs	r3, #2
  }
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	fe00e800 	.word	0xfe00e800

080013b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af02      	add	r7, sp, #8
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	4608      	mov	r0, r1
 80013c2:	4611      	mov	r1, r2
 80013c4:	461a      	mov	r2, r3
 80013c6:	4603      	mov	r3, r0
 80013c8:	817b      	strh	r3, [r7, #10]
 80013ca:	460b      	mov	r3, r1
 80013cc:	813b      	strh	r3, [r7, #8]
 80013ce:	4613      	mov	r3, r2
 80013d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	8979      	ldrh	r1, [r7, #10]
 80013d8:	4b20      	ldr	r3, [pc, #128]	; (800145c <I2C_RequestMemoryWrite+0xa4>)
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f000 fa1b 	bl	800181c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013e6:	69fa      	ldr	r2, [r7, #28]
 80013e8:	69b9      	ldr	r1, [r7, #24]
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f000 f8ab 	bl	8001546 <I2C_WaitOnTXISFlagUntilTimeout>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e02c      	b.n	8001454 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d105      	bne.n	800140c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001400:	893b      	ldrh	r3, [r7, #8]
 8001402:	b2da      	uxtb	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	629a      	str	r2, [r3, #40]	; 0x28
 800140a:	e015      	b.n	8001438 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800140c:	893b      	ldrh	r3, [r7, #8]
 800140e:	0a1b      	lsrs	r3, r3, #8
 8001410:	b29b      	uxth	r3, r3
 8001412:	b2da      	uxtb	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800141a:	69fa      	ldr	r2, [r7, #28]
 800141c:	69b9      	ldr	r1, [r7, #24]
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f000 f891 	bl	8001546 <I2C_WaitOnTXISFlagUntilTimeout>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e012      	b.n	8001454 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800142e:	893b      	ldrh	r3, [r7, #8]
 8001430:	b2da      	uxtb	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	2200      	movs	r2, #0
 8001440:	2180      	movs	r1, #128	; 0x80
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f000 f830 	bl	80014a8 <I2C_WaitOnFlagUntilTimeout>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e000      	b.n	8001454 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	80002000 	.word	0x80002000

08001460 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b02      	cmp	r3, #2
 8001474:	d103      	bne.n	800147e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2200      	movs	r2, #0
 800147c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b01      	cmp	r3, #1
 800148a:	d007      	beq.n	800149c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	699a      	ldr	r2, [r3, #24]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 0201 	orr.w	r2, r2, #1
 800149a:	619a      	str	r2, [r3, #24]
  }
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	4613      	mov	r3, r2
 80014b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014b8:	e031      	b.n	800151e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d02d      	beq.n	800151e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014c2:	f7ff fb4d 	bl	8000b60 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d302      	bcc.n	80014d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d122      	bne.n	800151e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	699a      	ldr	r2, [r3, #24]
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	4013      	ands	r3, r2
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	bf0c      	ite	eq
 80014e8:	2301      	moveq	r3, #1
 80014ea:	2300      	movne	r3, #0
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	461a      	mov	r2, r3
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d113      	bne.n	800151e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	f043 0220 	orr.w	r2, r3, #32
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2220      	movs	r2, #32
 8001506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e00f      	b.n	800153e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	699a      	ldr	r2, [r3, #24]
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	4013      	ands	r3, r2
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	429a      	cmp	r2, r3
 800152c:	bf0c      	ite	eq
 800152e:	2301      	moveq	r3, #1
 8001530:	2300      	movne	r3, #0
 8001532:	b2db      	uxtb	r3, r3
 8001534:	461a      	mov	r2, r3
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	429a      	cmp	r2, r3
 800153a:	d0be      	beq.n	80014ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b084      	sub	sp, #16
 800154a:	af00      	add	r7, sp, #0
 800154c:	60f8      	str	r0, [r7, #12]
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001552:	e033      	b.n	80015bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	68b9      	ldr	r1, [r7, #8]
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f000 f87f 	bl	800165c <I2C_IsErrorOccurred>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e031      	b.n	80015cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800156e:	d025      	beq.n	80015bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001570:	f7ff faf6 	bl	8000b60 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	429a      	cmp	r2, r3
 800157e:	d302      	bcc.n	8001586 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d11a      	bne.n	80015bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b02      	cmp	r3, #2
 8001592:	d013      	beq.n	80015bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001598:	f043 0220 	orr.w	r2, r3, #32
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2220      	movs	r2, #32
 80015a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e007      	b.n	80015cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d1c4      	bne.n	8001554 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015e0:	e02f      	b.n	8001642 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f000 f838 	bl	800165c <I2C_IsErrorOccurred>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e02d      	b.n	8001652 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015f6:	f7ff fab3 	bl	8000b60 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	429a      	cmp	r2, r3
 8001604:	d302      	bcc.n	800160c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d11a      	bne.n	8001642 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f003 0320 	and.w	r3, r3, #32
 8001616:	2b20      	cmp	r3, #32
 8001618:	d013      	beq.n	8001642 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	f043 0220 	orr.w	r2, r3, #32
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2220      	movs	r2, #32
 800162a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e007      	b.n	8001652 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0320 	and.w	r3, r3, #32
 800164c:	2b20      	cmp	r3, #32
 800164e:	d1c8      	bne.n	80015e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	f003 0310 	and.w	r3, r3, #16
 8001684:	2b00      	cmp	r3, #0
 8001686:	d068      	beq.n	800175a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2210      	movs	r2, #16
 800168e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001690:	e049      	b.n	8001726 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001698:	d045      	beq.n	8001726 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800169a:	f7ff fa61 	bl	8000b60 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d302      	bcc.n	80016b0 <I2C_IsErrorOccurred+0x54>
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d13a      	bne.n	8001726 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80016c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016d2:	d121      	bne.n	8001718 <I2C_IsErrorOccurred+0xbc>
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016da:	d01d      	beq.n	8001718 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80016dc:	7cfb      	ldrb	r3, [r7, #19]
 80016de:	2b20      	cmp	r3, #32
 80016e0:	d01a      	beq.n	8001718 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80016f2:	f7ff fa35 	bl	8000b60 <HAL_GetTick>
 80016f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016f8:	e00e      	b.n	8001718 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80016fa:	f7ff fa31 	bl	8000b60 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b19      	cmp	r3, #25
 8001706:	d907      	bls.n	8001718 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001708:	6a3b      	ldr	r3, [r7, #32]
 800170a:	f043 0320 	orr.w	r3, r3, #32
 800170e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001716:	e006      	b.n	8001726 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	f003 0320 	and.w	r3, r3, #32
 8001722:	2b20      	cmp	r3, #32
 8001724:	d1e9      	bne.n	80016fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f003 0320 	and.w	r3, r3, #32
 8001730:	2b20      	cmp	r3, #32
 8001732:	d003      	beq.n	800173c <I2C_IsErrorOccurred+0xe0>
 8001734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0aa      	beq.n	8001692 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800173c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001740:	2b00      	cmp	r3, #0
 8001742:	d103      	bne.n	800174c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2220      	movs	r2, #32
 800174a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	f043 0304 	orr.w	r3, r3, #4
 8001752:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001768:	2b00      	cmp	r3, #0
 800176a:	d00b      	beq.n	8001784 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800176c:	6a3b      	ldr	r3, [r7, #32]
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800177c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00b      	beq.n	80017a6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	f043 0308 	orr.w	r3, r3, #8
 8001794:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800179e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00b      	beq.n	80017c8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80017b0:	6a3b      	ldr	r3, [r7, #32]
 80017b2:	f043 0302 	orr.w	r3, r3, #2
 80017b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80017c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d01c      	beq.n	800180a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f7ff fe45 	bl	8001460 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6859      	ldr	r1, [r3, #4]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <I2C_IsErrorOccurred+0x1bc>)
 80017e2:	400b      	ands	r3, r1
 80017e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017ea:	6a3b      	ldr	r3, [r7, #32]
 80017ec:	431a      	orrs	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2220      	movs	r2, #32
 80017f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800180a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800180e:	4618      	mov	r0, r3
 8001810:	3728      	adds	r7, #40	; 0x28
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	fe00e800 	.word	0xfe00e800

0800181c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	460b      	mov	r3, r1
 8001828:	817b      	strh	r3, [r7, #10]
 800182a:	4613      	mov	r3, r2
 800182c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800182e:	897b      	ldrh	r3, [r7, #10]
 8001830:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001834:	7a7b      	ldrb	r3, [r7, #9]
 8001836:	041b      	lsls	r3, r3, #16
 8001838:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800183c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	4313      	orrs	r3, r2
 8001846:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800184a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	6a3b      	ldr	r3, [r7, #32]
 8001854:	0d5b      	lsrs	r3, r3, #21
 8001856:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <I2C_TransferConfig+0x60>)
 800185c:	430b      	orrs	r3, r1
 800185e:	43db      	mvns	r3, r3
 8001860:	ea02 0103 	and.w	r1, r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	430a      	orrs	r2, r1
 800186c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800186e:	bf00      	nop
 8001870:	371c      	adds	r7, #28
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	03ff63ff 	.word	0x03ff63ff

08001880 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b20      	cmp	r3, #32
 8001894:	d138      	bne.n	8001908 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018a0:	2302      	movs	r3, #2
 80018a2:	e032      	b.n	800190a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2224      	movs	r2, #36	; 0x24
 80018b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0201 	bic.w	r2, r2, #1
 80018c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6819      	ldr	r1, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0201 	orr.w	r2, r2, #1
 80018f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2220      	movs	r2, #32
 80018f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	e000      	b.n	800190a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001908:	2302      	movs	r3, #2
  }
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001916:	b480      	push	{r7}
 8001918:	b085      	sub	sp, #20
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b20      	cmp	r3, #32
 800192a:	d139      	bne.n	80019a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001932:	2b01      	cmp	r3, #1
 8001934:	d101      	bne.n	800193a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001936:	2302      	movs	r3, #2
 8001938:	e033      	b.n	80019a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2224      	movs	r2, #36	; 0x24
 8001946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0201 	bic.w	r2, r2, #1
 8001958:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001968:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	4313      	orrs	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2220      	movs	r2, #32
 8001990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	e000      	b.n	80019a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019a0:	2302      	movs	r3, #2
  }
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019c0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d102      	bne.n	80019d6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	f001 b823 	b.w	8002a1c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 817d 	beq.w	8001ce6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019ec:	4bbc      	ldr	r3, [pc, #752]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 030c 	and.w	r3, r3, #12
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d00c      	beq.n	8001a12 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019f8:	4bb9      	ldr	r3, [pc, #740]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 030c 	and.w	r3, r3, #12
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d15c      	bne.n	8001abe <HAL_RCC_OscConfig+0x10e>
 8001a04:	4bb6      	ldr	r3, [pc, #728]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a10:	d155      	bne.n	8001abe <HAL_RCC_OscConfig+0x10e>
 8001a12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a16:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001a1e:	fa93 f3a3 	rbit	r3, r3
 8001a22:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a26:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2a:	fab3 f383 	clz	r3, r3
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	095b      	lsrs	r3, r3, #5
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d102      	bne.n	8001a44 <HAL_RCC_OscConfig+0x94>
 8001a3e:	4ba8      	ldr	r3, [pc, #672]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	e015      	b.n	8001a70 <HAL_RCC_OscConfig+0xc0>
 8001a44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a48:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a50:	fa93 f3a3 	rbit	r3, r3
 8001a54:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a5c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001a60:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001a64:	fa93 f3a3 	rbit	r3, r3
 8001a68:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001a6c:	4b9c      	ldr	r3, [pc, #624]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a74:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001a78:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001a7c:	fa92 f2a2 	rbit	r2, r2
 8001a80:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001a84:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001a88:	fab2 f282 	clz	r2, r2
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	f042 0220 	orr.w	r2, r2, #32
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	f002 021f 	and.w	r2, r2, #31
 8001a98:	2101      	movs	r1, #1
 8001a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 811f 	beq.w	8001ce4 <HAL_RCC_OscConfig+0x334>
 8001aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f040 8116 	bne.w	8001ce4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	f000 bfaf 	b.w	8002a1c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ace:	d106      	bne.n	8001ade <HAL_RCC_OscConfig+0x12e>
 8001ad0:	4b83      	ldr	r3, [pc, #524]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a82      	ldr	r2, [pc, #520]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	e036      	b.n	8001b4c <HAL_RCC_OscConfig+0x19c>
 8001ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x158>
 8001aee:	4b7c      	ldr	r3, [pc, #496]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a7b      	ldr	r2, [pc, #492]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b79      	ldr	r3, [pc, #484]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a78      	ldr	r2, [pc, #480]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	e021      	b.n	8001b4c <HAL_RCC_OscConfig+0x19c>
 8001b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b18:	d10c      	bne.n	8001b34 <HAL_RCC_OscConfig+0x184>
 8001b1a:	4b71      	ldr	r3, [pc, #452]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a70      	ldr	r2, [pc, #448]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	4b6e      	ldr	r3, [pc, #440]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a6d      	ldr	r2, [pc, #436]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	e00b      	b.n	8001b4c <HAL_RCC_OscConfig+0x19c>
 8001b34:	4b6a      	ldr	r3, [pc, #424]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a69      	ldr	r2, [pc, #420]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	4b67      	ldr	r3, [pc, #412]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a66      	ldr	r2, [pc, #408]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b4a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b4c:	4b64      	ldr	r3, [pc, #400]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	f023 020f 	bic.w	r2, r3, #15
 8001b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	495f      	ldr	r1, [pc, #380]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d059      	beq.n	8001c2a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b76:	f7fe fff3 	bl	8000b60 <HAL_GetTick>
 8001b7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	e00a      	b.n	8001b96 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b80:	f7fe ffee 	bl	8000b60 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b64      	cmp	r3, #100	; 0x64
 8001b8e:	d902      	bls.n	8001b96 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	f000 bf43 	b.w	8002a1c <HAL_RCC_OscConfig+0x106c>
 8001b96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b9a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001ba2:	fa93 f3a3 	rbit	r3, r3
 8001ba6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001baa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bae:	fab3 f383 	clz	r3, r3
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	095b      	lsrs	r3, r3, #5
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d102      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x218>
 8001bc2:	4b47      	ldr	r3, [pc, #284]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	e015      	b.n	8001bf4 <HAL_RCC_OscConfig+0x244>
 8001bc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bcc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001bd4:	fa93 f3a3 	rbit	r3, r3
 8001bd8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001bdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001be0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001be4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001be8:	fa93 f3a3 	rbit	r3, r3
 8001bec:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001bf0:	4b3b      	ldr	r3, [pc, #236]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bf8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001bfc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001c00:	fa92 f2a2 	rbit	r2, r2
 8001c04:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001c08:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001c0c:	fab2 f282 	clz	r2, r2
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	f042 0220 	orr.w	r2, r2, #32
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	f002 021f 	and.w	r2, r2, #31
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0ab      	beq.n	8001b80 <HAL_RCC_OscConfig+0x1d0>
 8001c28:	e05d      	b.n	8001ce6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2a:	f7fe ff99 	bl	8000b60 <HAL_GetTick>
 8001c2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c32:	e00a      	b.n	8001c4a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c34:	f7fe ff94 	bl	8000b60 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b64      	cmp	r3, #100	; 0x64
 8001c42:	d902      	bls.n	8001c4a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	f000 bee9 	b.w	8002a1c <HAL_RCC_OscConfig+0x106c>
 8001c4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c4e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001c56:	fa93 f3a3 	rbit	r3, r3
 8001c5a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001c5e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	095b      	lsrs	r3, r3, #5
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d102      	bne.n	8001c7c <HAL_RCC_OscConfig+0x2cc>
 8001c76:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	e015      	b.n	8001ca8 <HAL_RCC_OscConfig+0x2f8>
 8001c7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c80:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c94:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c98:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001c9c:	fa93 f3a3 	rbit	r3, r3
 8001ca0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001ca4:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <HAL_RCC_OscConfig+0x330>)
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cac:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001cb0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001cb4:	fa92 f2a2 	rbit	r2, r2
 8001cb8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001cbc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001cc0:	fab2 f282 	clz	r2, r2
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	f042 0220 	orr.w	r2, r2, #32
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	f002 021f 	and.w	r2, r2, #31
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1ab      	bne.n	8001c34 <HAL_RCC_OscConfig+0x284>
 8001cdc:	e003      	b.n	8001ce6 <HAL_RCC_OscConfig+0x336>
 8001cde:	bf00      	nop
 8001ce0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 817d 	beq.w	8001ff6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cfc:	4ba6      	ldr	r3, [pc, #664]	; (8001f98 <HAL_RCC_OscConfig+0x5e8>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 030c 	and.w	r3, r3, #12
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00b      	beq.n	8001d20 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d08:	4ba3      	ldr	r3, [pc, #652]	; (8001f98 <HAL_RCC_OscConfig+0x5e8>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 030c 	and.w	r3, r3, #12
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d172      	bne.n	8001dfa <HAL_RCC_OscConfig+0x44a>
 8001d14:	4ba0      	ldr	r3, [pc, #640]	; (8001f98 <HAL_RCC_OscConfig+0x5e8>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d16c      	bne.n	8001dfa <HAL_RCC_OscConfig+0x44a>
 8001d20:	2302      	movs	r3, #2
 8001d22:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001d32:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d36:	fab3 f383 	clz	r3, r3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	095b      	lsrs	r3, r3, #5
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d102      	bne.n	8001d50 <HAL_RCC_OscConfig+0x3a0>
 8001d4a:	4b93      	ldr	r3, [pc, #588]	; (8001f98 <HAL_RCC_OscConfig+0x5e8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	e013      	b.n	8001d78 <HAL_RCC_OscConfig+0x3c8>
 8001d50:	2302      	movs	r3, #2
 8001d52:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001d5a:	fa93 f3a3 	rbit	r3, r3
 8001d5e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001d62:	2302      	movs	r3, #2
 8001d64:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001d68:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001d6c:	fa93 f3a3 	rbit	r3, r3
 8001d70:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001d74:	4b88      	ldr	r3, [pc, #544]	; (8001f98 <HAL_RCC_OscConfig+0x5e8>)
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	2202      	movs	r2, #2
 8001d7a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001d7e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001d82:	fa92 f2a2 	rbit	r2, r2
 8001d86:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001d8a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001d8e:	fab2 f282 	clz	r2, r2
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	f042 0220 	orr.w	r2, r2, #32
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	f002 021f 	and.w	r2, r2, #31
 8001d9e:	2101      	movs	r1, #1
 8001da0:	fa01 f202 	lsl.w	r2, r1, r2
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00a      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x410>
 8001daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d002      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	f000 be2e 	b.w	8002a1c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc0:	4b75      	ldr	r3, [pc, #468]	; (8001f98 <HAL_RCC_OscConfig+0x5e8>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dcc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	21f8      	movs	r1, #248	; 0xf8
 8001dd6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001dde:	fa91 f1a1 	rbit	r1, r1
 8001de2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001de6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001dea:	fab1 f181 	clz	r1, r1
 8001dee:	b2c9      	uxtb	r1, r1
 8001df0:	408b      	lsls	r3, r1
 8001df2:	4969      	ldr	r1, [pc, #420]	; (8001f98 <HAL_RCC_OscConfig+0x5e8>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df8:	e0fd      	b.n	8001ff6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 8088 	beq.w	8001f1c <HAL_RCC_OscConfig+0x56c>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001e1e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	461a      	mov	r2, r3
 8001e34:	2301      	movs	r3, #1
 8001e36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7fe fe92 	bl	8000b60 <HAL_GetTick>
 8001e3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e42:	f7fe fe8d 	bl	8000b60 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d902      	bls.n	8001e58 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	f000 bde2 	b.w	8002a1c <HAL_RCC_OscConfig+0x106c>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001e62:	fa93 f3a3 	rbit	r3, r3
 8001e66:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001e6a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	095b      	lsrs	r3, r3, #5
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d102      	bne.n	8001e88 <HAL_RCC_OscConfig+0x4d8>
 8001e82:	4b45      	ldr	r3, [pc, #276]	; (8001f98 <HAL_RCC_OscConfig+0x5e8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	e013      	b.n	8001eb0 <HAL_RCC_OscConfig+0x500>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001ea0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001ea4:	fa93 f3a3 	rbit	r3, r3
 8001ea8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001eac:	4b3a      	ldr	r3, [pc, #232]	; (8001f98 <HAL_RCC_OscConfig+0x5e8>)
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001eb6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001eba:	fa92 f2a2 	rbit	r2, r2
 8001ebe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001ec2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001ec6:	fab2 f282 	clz	r2, r2
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	f042 0220 	orr.w	r2, r2, #32
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	f002 021f 	and.w	r2, r2, #31
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0af      	beq.n	8001e42 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee2:	4b2d      	ldr	r3, [pc, #180]	; (8001f98 <HAL_RCC_OscConfig+0x5e8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	21f8      	movs	r1, #248	; 0xf8
 8001ef8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001f00:	fa91 f1a1 	rbit	r1, r1
 8001f04:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001f08:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001f0c:	fab1 f181 	clz	r1, r1
 8001f10:	b2c9      	uxtb	r1, r1
 8001f12:	408b      	lsls	r3, r1
 8001f14:	4920      	ldr	r1, [pc, #128]	; (8001f98 <HAL_RCC_OscConfig+0x5e8>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	600b      	str	r3, [r1, #0]
 8001f1a:	e06c      	b.n	8001ff6 <HAL_RCC_OscConfig+0x646>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001f2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f32:	fab3 f383 	clz	r3, r3
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	461a      	mov	r2, r3
 8001f44:	2300      	movs	r3, #0
 8001f46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7fe fe0a 	bl	8000b60 <HAL_GetTick>
 8001f4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f52:	f7fe fe05 	bl	8000b60 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d902      	bls.n	8001f68 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	f000 bd5a 	b.w	8002a1c <HAL_RCC_OscConfig+0x106c>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7e:	fab3 f383 	clz	r3, r3
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	095b      	lsrs	r3, r3, #5
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d104      	bne.n	8001f9c <HAL_RCC_OscConfig+0x5ec>
 8001f92:	4b01      	ldr	r3, [pc, #4]	; (8001f98 <HAL_RCC_OscConfig+0x5e8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	e015      	b.n	8001fc4 <HAL_RCC_OscConfig+0x614>
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001fa6:	fa93 f3a3 	rbit	r3, r3
 8001faa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001fae:	2302      	movs	r3, #2
 8001fb0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001fb4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001fb8:	fa93 f3a3 	rbit	r3, r3
 8001fbc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001fc0:	4bc8      	ldr	r3, [pc, #800]	; (80022e4 <HAL_RCC_OscConfig+0x934>)
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001fca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001fce:	fa92 f2a2 	rbit	r2, r2
 8001fd2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001fd6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001fda:	fab2 f282 	clz	r2, r2
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	f042 0220 	orr.w	r2, r2, #32
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	f002 021f 	and.w	r2, r2, #31
 8001fea:	2101      	movs	r1, #1
 8001fec:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1ad      	bne.n	8001f52 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 8110 	beq.w	800222c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800200c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002010:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d079      	beq.n	8002110 <HAL_RCC_OscConfig+0x760>
 800201c:	2301      	movs	r3, #1
 800201e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002022:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002026:	fa93 f3a3 	rbit	r3, r3
 800202a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800202e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002032:	fab3 f383 	clz	r3, r3
 8002036:	b2db      	uxtb	r3, r3
 8002038:	461a      	mov	r2, r3
 800203a:	4bab      	ldr	r3, [pc, #684]	; (80022e8 <HAL_RCC_OscConfig+0x938>)
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	461a      	mov	r2, r3
 8002042:	2301      	movs	r3, #1
 8002044:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002046:	f7fe fd8b 	bl	8000b60 <HAL_GetTick>
 800204a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204e:	e00a      	b.n	8002066 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002050:	f7fe fd86 	bl	8000b60 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d902      	bls.n	8002066 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	f000 bcdb 	b.w	8002a1c <HAL_RCC_OscConfig+0x106c>
 8002066:	2302      	movs	r3, #2
 8002068:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002080:	2202      	movs	r2, #2
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002088:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	fa93 f2a3 	rbit	r2, r3
 8002092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002096:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80020a4:	2202      	movs	r2, #2
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	fa93 f2a3 	rbit	r2, r3
 80020b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80020be:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020c0:	4b88      	ldr	r3, [pc, #544]	; (80022e4 <HAL_RCC_OscConfig+0x934>)
 80020c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020cc:	2102      	movs	r1, #2
 80020ce:	6019      	str	r1, [r3, #0]
 80020d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	fa93 f1a3 	rbit	r1, r3
 80020de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80020e6:	6019      	str	r1, [r3, #0]
  return result;
 80020e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	fab3 f383 	clz	r3, r3
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	f003 031f 	and.w	r3, r3, #31
 8002102:	2101      	movs	r1, #1
 8002104:	fa01 f303 	lsl.w	r3, r1, r3
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0a0      	beq.n	8002050 <HAL_RCC_OscConfig+0x6a0>
 800210e:	e08d      	b.n	800222c <HAL_RCC_OscConfig+0x87c>
 8002110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002114:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002118:	2201      	movs	r2, #1
 800211a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002120:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	fa93 f2a3 	rbit	r2, r3
 800212a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002132:	601a      	str	r2, [r3, #0]
  return result;
 8002134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002138:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800213c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	461a      	mov	r2, r3
 8002146:	4b68      	ldr	r3, [pc, #416]	; (80022e8 <HAL_RCC_OscConfig+0x938>)
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	461a      	mov	r2, r3
 800214e:	2300      	movs	r3, #0
 8002150:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002152:	f7fe fd05 	bl	8000b60 <HAL_GetTick>
 8002156:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215a:	e00a      	b.n	8002172 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800215c:	f7fe fd00 	bl	8000b60 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d902      	bls.n	8002172 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	f000 bc55 	b.w	8002a1c <HAL_RCC_OscConfig+0x106c>
 8002172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002176:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800217a:	2202      	movs	r2, #2
 800217c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002182:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	fa93 f2a3 	rbit	r2, r3
 800218c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002190:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800219e:	2202      	movs	r2, #2
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	fa93 f2a3 	rbit	r2, r3
 80021b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80021c2:	2202      	movs	r2, #2
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	fa93 f2a3 	rbit	r2, r3
 80021d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80021dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021de:	4b41      	ldr	r3, [pc, #260]	; (80022e4 <HAL_RCC_OscConfig+0x934>)
 80021e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80021ea:	2102      	movs	r1, #2
 80021ec:	6019      	str	r1, [r3, #0]
 80021ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	fa93 f1a3 	rbit	r1, r3
 80021fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002200:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002204:	6019      	str	r1, [r3, #0]
  return result;
 8002206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	fab3 f383 	clz	r3, r3
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800221a:	b2db      	uxtb	r3, r3
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	2101      	movs	r1, #1
 8002222:	fa01 f303 	lsl.w	r3, r1, r3
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d197      	bne.n	800215c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800222c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002230:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 81a1 	beq.w	8002584 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002248:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <HAL_RCC_OscConfig+0x934>)
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d116      	bne.n	8002282 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002254:	4b23      	ldr	r3, [pc, #140]	; (80022e4 <HAL_RCC_OscConfig+0x934>)
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	4a22      	ldr	r2, [pc, #136]	; (80022e4 <HAL_RCC_OscConfig+0x934>)
 800225a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225e:	61d3      	str	r3, [r2, #28]
 8002260:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <HAL_RCC_OscConfig+0x934>)
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002276:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800227a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800227c:	2301      	movs	r3, #1
 800227e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002282:	4b1a      	ldr	r3, [pc, #104]	; (80022ec <HAL_RCC_OscConfig+0x93c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228a:	2b00      	cmp	r3, #0
 800228c:	d11a      	bne.n	80022c4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800228e:	4b17      	ldr	r3, [pc, #92]	; (80022ec <HAL_RCC_OscConfig+0x93c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a16      	ldr	r2, [pc, #88]	; (80022ec <HAL_RCC_OscConfig+0x93c>)
 8002294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002298:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800229a:	f7fe fc61 	bl	8000b60 <HAL_GetTick>
 800229e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a2:	e009      	b.n	80022b8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a4:	f7fe fc5c 	bl	8000b60 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b64      	cmp	r3, #100	; 0x64
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e3b1      	b.n	8002a1c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <HAL_RCC_OscConfig+0x93c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0ef      	beq.n	80022a4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d10d      	bne.n	80022f0 <HAL_RCC_OscConfig+0x940>
 80022d4:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <HAL_RCC_OscConfig+0x934>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	4a02      	ldr	r2, [pc, #8]	; (80022e4 <HAL_RCC_OscConfig+0x934>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6213      	str	r3, [r2, #32]
 80022e0:	e03c      	b.n	800235c <HAL_RCC_OscConfig+0x9ac>
 80022e2:	bf00      	nop
 80022e4:	40021000 	.word	0x40021000
 80022e8:	10908120 	.word	0x10908120
 80022ec:	40007000 	.word	0x40007000
 80022f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10c      	bne.n	800231a <HAL_RCC_OscConfig+0x96a>
 8002300:	4bc1      	ldr	r3, [pc, #772]	; (8002608 <HAL_RCC_OscConfig+0xc58>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	4ac0      	ldr	r2, [pc, #768]	; (8002608 <HAL_RCC_OscConfig+0xc58>)
 8002306:	f023 0301 	bic.w	r3, r3, #1
 800230a:	6213      	str	r3, [r2, #32]
 800230c:	4bbe      	ldr	r3, [pc, #760]	; (8002608 <HAL_RCC_OscConfig+0xc58>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4abd      	ldr	r2, [pc, #756]	; (8002608 <HAL_RCC_OscConfig+0xc58>)
 8002312:	f023 0304 	bic.w	r3, r3, #4
 8002316:	6213      	str	r3, [r2, #32]
 8002318:	e020      	b.n	800235c <HAL_RCC_OscConfig+0x9ac>
 800231a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2b05      	cmp	r3, #5
 8002328:	d10c      	bne.n	8002344 <HAL_RCC_OscConfig+0x994>
 800232a:	4bb7      	ldr	r3, [pc, #732]	; (8002608 <HAL_RCC_OscConfig+0xc58>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4ab6      	ldr	r2, [pc, #728]	; (8002608 <HAL_RCC_OscConfig+0xc58>)
 8002330:	f043 0304 	orr.w	r3, r3, #4
 8002334:	6213      	str	r3, [r2, #32]
 8002336:	4bb4      	ldr	r3, [pc, #720]	; (8002608 <HAL_RCC_OscConfig+0xc58>)
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	4ab3      	ldr	r2, [pc, #716]	; (8002608 <HAL_RCC_OscConfig+0xc58>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6213      	str	r3, [r2, #32]
 8002342:	e00b      	b.n	800235c <HAL_RCC_OscConfig+0x9ac>
 8002344:	4bb0      	ldr	r3, [pc, #704]	; (8002608 <HAL_RCC_OscConfig+0xc58>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4aaf      	ldr	r2, [pc, #700]	; (8002608 <HAL_RCC_OscConfig+0xc58>)
 800234a:	f023 0301 	bic.w	r3, r3, #1
 800234e:	6213      	str	r3, [r2, #32]
 8002350:	4bad      	ldr	r3, [pc, #692]	; (8002608 <HAL_RCC_OscConfig+0xc58>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4aac      	ldr	r2, [pc, #688]	; (8002608 <HAL_RCC_OscConfig+0xc58>)
 8002356:	f023 0304 	bic.w	r3, r3, #4
 800235a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800235c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002360:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 8081 	beq.w	8002470 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236e:	f7fe fbf7 	bl	8000b60 <HAL_GetTick>
 8002372:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002376:	e00b      	b.n	8002390 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002378:	f7fe fbf2 	bl	8000b60 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	f241 3288 	movw	r2, #5000	; 0x1388
 8002388:	4293      	cmp	r3, r2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e345      	b.n	8002a1c <HAL_RCC_OscConfig+0x106c>
 8002390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002394:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002398:	2202      	movs	r2, #2
 800239a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	fa93 f2a3 	rbit	r2, r3
 80023aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80023bc:	2202      	movs	r2, #2
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	fa93 f2a3 	rbit	r2, r3
 80023ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80023d6:	601a      	str	r2, [r3, #0]
  return result;
 80023d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023dc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80023e0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	095b      	lsrs	r3, r3, #5
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d102      	bne.n	80023fc <HAL_RCC_OscConfig+0xa4c>
 80023f6:	4b84      	ldr	r3, [pc, #528]	; (8002608 <HAL_RCC_OscConfig+0xc58>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	e013      	b.n	8002424 <HAL_RCC_OscConfig+0xa74>
 80023fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002400:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002404:	2202      	movs	r2, #2
 8002406:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	fa93 f2a3 	rbit	r2, r3
 8002416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	4b79      	ldr	r3, [pc, #484]	; (8002608 <HAL_RCC_OscConfig+0xc58>)
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002428:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800242c:	2102      	movs	r1, #2
 800242e:	6011      	str	r1, [r2, #0]
 8002430:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002434:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	fa92 f1a2 	rbit	r1, r2
 800243e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002442:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002446:	6011      	str	r1, [r2, #0]
  return result;
 8002448:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800244c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	fab2 f282 	clz	r2, r2
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	f002 021f 	and.w	r2, r2, #31
 8002462:	2101      	movs	r1, #1
 8002464:	fa01 f202 	lsl.w	r2, r1, r2
 8002468:	4013      	ands	r3, r2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d084      	beq.n	8002378 <HAL_RCC_OscConfig+0x9c8>
 800246e:	e07f      	b.n	8002570 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002470:	f7fe fb76 	bl	8000b60 <HAL_GetTick>
 8002474:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002478:	e00b      	b.n	8002492 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800247a:	f7fe fb71 	bl	8000b60 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	f241 3288 	movw	r2, #5000	; 0x1388
 800248a:	4293      	cmp	r3, r2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e2c4      	b.n	8002a1c <HAL_RCC_OscConfig+0x106c>
 8002492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002496:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800249a:	2202      	movs	r2, #2
 800249c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	fa93 f2a3 	rbit	r2, r3
 80024ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80024be:	2202      	movs	r2, #2
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	fa93 f2a3 	rbit	r2, r3
 80024d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80024d8:	601a      	str	r2, [r3, #0]
  return result;
 80024da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024de:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80024e2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e4:	fab3 f383 	clz	r3, r3
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	f043 0302 	orr.w	r3, r3, #2
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d102      	bne.n	80024fe <HAL_RCC_OscConfig+0xb4e>
 80024f8:	4b43      	ldr	r3, [pc, #268]	; (8002608 <HAL_RCC_OscConfig+0xc58>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	e013      	b.n	8002526 <HAL_RCC_OscConfig+0xb76>
 80024fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002502:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002506:	2202      	movs	r2, #2
 8002508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	fa93 f2a3 	rbit	r2, r3
 8002518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	4b39      	ldr	r3, [pc, #228]	; (8002608 <HAL_RCC_OscConfig+0xc58>)
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800252a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800252e:	2102      	movs	r1, #2
 8002530:	6011      	str	r1, [r2, #0]
 8002532:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002536:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	fa92 f1a2 	rbit	r1, r2
 8002540:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002544:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002548:	6011      	str	r1, [r2, #0]
  return result;
 800254a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800254e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	fab2 f282 	clz	r2, r2
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	f002 021f 	and.w	r2, r2, #31
 8002564:	2101      	movs	r1, #1
 8002566:	fa01 f202 	lsl.w	r2, r1, r2
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d184      	bne.n	800247a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002570:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002574:	2b01      	cmp	r3, #1
 8002576:	d105      	bne.n	8002584 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002578:	4b23      	ldr	r3, [pc, #140]	; (8002608 <HAL_RCC_OscConfig+0xc58>)
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	4a22      	ldr	r2, [pc, #136]	; (8002608 <HAL_RCC_OscConfig+0xc58>)
 800257e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002582:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002588:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 8242 	beq.w	8002a1a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002596:	4b1c      	ldr	r3, [pc, #112]	; (8002608 <HAL_RCC_OscConfig+0xc58>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b08      	cmp	r3, #8
 80025a0:	f000 8213 	beq.w	80029ca <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	f040 8162 	bne.w	800287a <HAL_RCC_OscConfig+0xeca>
 80025b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ba:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80025be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	fa93 f2a3 	rbit	r2, r3
 80025d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80025da:	601a      	str	r2, [r3, #0]
  return result;
 80025dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80025e4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	461a      	mov	r2, r3
 80025f8:	2300      	movs	r3, #0
 80025fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7fe fab0 	bl	8000b60 <HAL_GetTick>
 8002600:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002604:	e00c      	b.n	8002620 <HAL_RCC_OscConfig+0xc70>
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800260c:	f7fe faa8 	bl	8000b60 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e1fd      	b.n	8002a1c <HAL_RCC_OscConfig+0x106c>
 8002620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002624:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002628:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800262c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002632:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	fa93 f2a3 	rbit	r2, r3
 800263c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002640:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002644:	601a      	str	r2, [r3, #0]
  return result;
 8002646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800264e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002650:	fab3 f383 	clz	r3, r3
 8002654:	b2db      	uxtb	r3, r3
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	b2db      	uxtb	r3, r3
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b01      	cmp	r3, #1
 8002662:	d102      	bne.n	800266a <HAL_RCC_OscConfig+0xcba>
 8002664:	4bb0      	ldr	r3, [pc, #704]	; (8002928 <HAL_RCC_OscConfig+0xf78>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	e027      	b.n	80026ba <HAL_RCC_OscConfig+0xd0a>
 800266a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002672:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002676:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	fa93 f2a3 	rbit	r2, r3
 8002686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002694:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002698:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	fa93 f2a3 	rbit	r2, r3
 80026ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	4b9c      	ldr	r3, [pc, #624]	; (8002928 <HAL_RCC_OscConfig+0xf78>)
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026be:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80026c2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026c6:	6011      	str	r1, [r2, #0]
 80026c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026cc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80026d0:	6812      	ldr	r2, [r2, #0]
 80026d2:	fa92 f1a2 	rbit	r1, r2
 80026d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026da:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80026de:	6011      	str	r1, [r2, #0]
  return result;
 80026e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026e4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80026e8:	6812      	ldr	r2, [r2, #0]
 80026ea:	fab2 f282 	clz	r2, r2
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	f042 0220 	orr.w	r2, r2, #32
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	f002 021f 	and.w	r2, r2, #31
 80026fa:	2101      	movs	r1, #1
 80026fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d182      	bne.n	800260c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002706:	4b88      	ldr	r3, [pc, #544]	; (8002928 <HAL_RCC_OscConfig+0xf78>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800270e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002712:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800271a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	430b      	orrs	r3, r1
 8002728:	497f      	ldr	r1, [pc, #508]	; (8002928 <HAL_RCC_OscConfig+0xf78>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
 800272e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002732:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002736:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800273a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002740:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	fa93 f2a3 	rbit	r2, r3
 800274a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002752:	601a      	str	r2, [r3, #0]
  return result;
 8002754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002758:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800275c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002768:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	461a      	mov	r2, r3
 8002770:	2301      	movs	r3, #1
 8002772:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002774:	f7fe f9f4 	bl	8000b60 <HAL_GetTick>
 8002778:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800277c:	e009      	b.n	8002792 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277e:	f7fe f9ef 	bl	8000b60 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e144      	b.n	8002a1c <HAL_RCC_OscConfig+0x106c>
 8002792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002796:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800279a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800279e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	fa93 f2a3 	rbit	r2, r3
 80027ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80027b6:	601a      	str	r2, [r3, #0]
  return result;
 80027b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027bc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80027c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	095b      	lsrs	r3, r3, #5
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d102      	bne.n	80027dc <HAL_RCC_OscConfig+0xe2c>
 80027d6:	4b54      	ldr	r3, [pc, #336]	; (8002928 <HAL_RCC_OscConfig+0xf78>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	e027      	b.n	800282c <HAL_RCC_OscConfig+0xe7c>
 80027dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80027e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ee:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	fa93 f2a3 	rbit	r2, r3
 80027f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002806:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800280a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002814:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	fa93 f2a3 	rbit	r2, r3
 800281e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002822:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	4b3f      	ldr	r3, [pc, #252]	; (8002928 <HAL_RCC_OscConfig+0xf78>)
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002830:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002834:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002838:	6011      	str	r1, [r2, #0]
 800283a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800283e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	fa92 f1a2 	rbit	r1, r2
 8002848:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800284c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002850:	6011      	str	r1, [r2, #0]
  return result;
 8002852:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002856:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	fab2 f282 	clz	r2, r2
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	f042 0220 	orr.w	r2, r2, #32
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	f002 021f 	and.w	r2, r2, #31
 800286c:	2101      	movs	r1, #1
 800286e:	fa01 f202 	lsl.w	r2, r1, r2
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d082      	beq.n	800277e <HAL_RCC_OscConfig+0xdce>
 8002878:	e0cf      	b.n	8002a1a <HAL_RCC_OscConfig+0x106a>
 800287a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002882:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002886:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	fa93 f2a3 	rbit	r2, r3
 8002896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800289e:	601a      	str	r2, [r3, #0]
  return result;
 80028a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80028a8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	461a      	mov	r2, r3
 80028bc:	2300      	movs	r3, #0
 80028be:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7fe f94e 	bl	8000b60 <HAL_GetTick>
 80028c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c8:	e009      	b.n	80028de <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ca:	f7fe f949 	bl	8000b60 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e09e      	b.n	8002a1c <HAL_RCC_OscConfig+0x106c>
 80028de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80028e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	fa93 f2a3 	rbit	r2, r3
 80028fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002902:	601a      	str	r2, [r3, #0]
  return result;
 8002904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002908:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800290c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	095b      	lsrs	r3, r3, #5
 8002916:	b2db      	uxtb	r3, r3
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b01      	cmp	r3, #1
 8002920:	d104      	bne.n	800292c <HAL_RCC_OscConfig+0xf7c>
 8002922:	4b01      	ldr	r3, [pc, #4]	; (8002928 <HAL_RCC_OscConfig+0xf78>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	e029      	b.n	800297c <HAL_RCC_OscConfig+0xfcc>
 8002928:	40021000 	.word	0x40021000
 800292c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002930:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002934:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002938:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	fa93 f2a3 	rbit	r2, r3
 8002948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002956:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800295a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002964:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	fa93 f2a3 	rbit	r2, r3
 800296e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002972:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	4b2b      	ldr	r3, [pc, #172]	; (8002a28 <HAL_RCC_OscConfig+0x1078>)
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002980:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002984:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002988:	6011      	str	r1, [r2, #0]
 800298a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800298e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	fa92 f1a2 	rbit	r1, r2
 8002998:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800299c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80029a0:	6011      	str	r1, [r2, #0]
  return result;
 80029a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029a6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	fab2 f282 	clz	r2, r2
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	f042 0220 	orr.w	r2, r2, #32
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	f002 021f 	and.w	r2, r2, #31
 80029bc:	2101      	movs	r1, #1
 80029be:	fa01 f202 	lsl.w	r2, r1, r2
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d180      	bne.n	80028ca <HAL_RCC_OscConfig+0xf1a>
 80029c8:	e027      	b.n	8002a1a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e01e      	b.n	8002a1c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029de:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <HAL_RCC_OscConfig+0x1078>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80029ea:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d10b      	bne.n	8002a16 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80029fe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d001      	beq.n	8002a1a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000

08002a2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b09e      	sub	sp, #120	; 0x78
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e162      	b.n	8002d0a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a44:	4b90      	ldr	r3, [pc, #576]	; (8002c88 <HAL_RCC_ClockConfig+0x25c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d910      	bls.n	8002a74 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	4b8d      	ldr	r3, [pc, #564]	; (8002c88 <HAL_RCC_ClockConfig+0x25c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 0207 	bic.w	r2, r3, #7
 8002a5a:	498b      	ldr	r1, [pc, #556]	; (8002c88 <HAL_RCC_ClockConfig+0x25c>)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a62:	4b89      	ldr	r3, [pc, #548]	; (8002c88 <HAL_RCC_ClockConfig+0x25c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e14a      	b.n	8002d0a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a80:	4b82      	ldr	r3, [pc, #520]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	497f      	ldr	r1, [pc, #508]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 80dc 	beq.w	8002c58 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d13c      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xf6>
 8002aa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ab0:	fa93 f3a3 	rbit	r3, r3
 8002ab4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab8:	fab3 f383 	clz	r3, r3
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d102      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xa6>
 8002acc:	4b6f      	ldr	r3, [pc, #444]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	e00f      	b.n	8002af2 <HAL_RCC_ClockConfig+0xc6>
 8002ad2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ad6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	667b      	str	r3, [r7, #100]	; 0x64
 8002ae0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ae4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ae8:	fa93 f3a3 	rbit	r3, r3
 8002aec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002aee:	4b67      	ldr	r3, [pc, #412]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002af6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002af8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002afa:	fa92 f2a2 	rbit	r2, r2
 8002afe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002b00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b02:	fab2 f282 	clz	r2, r2
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	f042 0220 	orr.w	r2, r2, #32
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	f002 021f 	and.w	r2, r2, #31
 8002b12:	2101      	movs	r1, #1
 8002b14:	fa01 f202 	lsl.w	r2, r1, r2
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d17b      	bne.n	8002c16 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e0f3      	b.n	8002d0a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d13c      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x178>
 8002b2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b2e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b32:	fa93 f3a3 	rbit	r3, r3
 8002b36:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	095b      	lsrs	r3, r3, #5
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d102      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x128>
 8002b4e:	4b4f      	ldr	r3, [pc, #316]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	e00f      	b.n	8002b74 <HAL_RCC_ClockConfig+0x148>
 8002b54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b58:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b5c:	fa93 f3a3 	rbit	r3, r3
 8002b60:	647b      	str	r3, [r7, #68]	; 0x44
 8002b62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b66:	643b      	str	r3, [r7, #64]	; 0x40
 8002b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b6a:	fa93 f3a3 	rbit	r3, r3
 8002b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b70:	4b46      	ldr	r3, [pc, #280]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b78:	63ba      	str	r2, [r7, #56]	; 0x38
 8002b7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b7c:	fa92 f2a2 	rbit	r2, r2
 8002b80:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002b82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b84:	fab2 f282 	clz	r2, r2
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	f042 0220 	orr.w	r2, r2, #32
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	f002 021f 	and.w	r2, r2, #31
 8002b94:	2101      	movs	r1, #1
 8002b96:	fa01 f202 	lsl.w	r2, r1, r2
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d13a      	bne.n	8002c16 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0b2      	b.n	8002d0a <HAL_RCC_ClockConfig+0x2de>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002baa:	fa93 f3a3 	rbit	r3, r3
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb2:	fab3 f383 	clz	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	095b      	lsrs	r3, r3, #5
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d102      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x1a0>
 8002bc6:	4b31      	ldr	r3, [pc, #196]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	e00d      	b.n	8002be8 <HAL_RCC_ClockConfig+0x1bc>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd8:	2302      	movs	r3, #2
 8002bda:	623b      	str	r3, [r7, #32]
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	61fb      	str	r3, [r7, #28]
 8002be4:	4b29      	ldr	r3, [pc, #164]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	2202      	movs	r2, #2
 8002bea:	61ba      	str	r2, [r7, #24]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	fa92 f2a2 	rbit	r2, r2
 8002bf2:	617a      	str	r2, [r7, #20]
  return result;
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	fab2 f282 	clz	r2, r2
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	f042 0220 	orr.w	r2, r2, #32
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	f002 021f 	and.w	r2, r2, #31
 8002c06:	2101      	movs	r1, #1
 8002c08:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e079      	b.n	8002d0a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c16:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f023 0203 	bic.w	r2, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	491a      	ldr	r1, [pc, #104]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c28:	f7fd ff9a 	bl	8000b60 <HAL_GetTick>
 8002c2c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2e:	e00a      	b.n	8002c46 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c30:	f7fd ff96 	bl	8000b60 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e061      	b.n	8002d0a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <HAL_RCC_ClockConfig+0x260>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 020c 	and.w	r2, r3, #12
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d1eb      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_RCC_ClockConfig+0x25c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d214      	bcs.n	8002c90 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c66:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <HAL_RCC_ClockConfig+0x25c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f023 0207 	bic.w	r2, r3, #7
 8002c6e:	4906      	ldr	r1, [pc, #24]	; (8002c88 <HAL_RCC_ClockConfig+0x25c>)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c76:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <HAL_RCC_ClockConfig+0x25c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e040      	b.n	8002d0a <HAL_RCC_ClockConfig+0x2de>
 8002c88:	40022000 	.word	0x40022000
 8002c8c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c9c:	4b1d      	ldr	r3, [pc, #116]	; (8002d14 <HAL_RCC_ClockConfig+0x2e8>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	491a      	ldr	r1, [pc, #104]	; (8002d14 <HAL_RCC_ClockConfig+0x2e8>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cba:	4b16      	ldr	r3, [pc, #88]	; (8002d14 <HAL_RCC_ClockConfig+0x2e8>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4912      	ldr	r1, [pc, #72]	; (8002d14 <HAL_RCC_ClockConfig+0x2e8>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002cce:	f000 f829 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 8002cd2:	4601      	mov	r1, r0
 8002cd4:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <HAL_RCC_ClockConfig+0x2e8>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cdc:	22f0      	movs	r2, #240	; 0xf0
 8002cde:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	fa92 f2a2 	rbit	r2, r2
 8002ce6:	60fa      	str	r2, [r7, #12]
  return result;
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	fab2 f282 	clz	r2, r2
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	40d3      	lsrs	r3, r2
 8002cf2:	4a09      	ldr	r2, [pc, #36]	; (8002d18 <HAL_RCC_ClockConfig+0x2ec>)
 8002cf4:	5cd3      	ldrb	r3, [r2, r3]
 8002cf6:	fa21 f303 	lsr.w	r3, r1, r3
 8002cfa:	4a08      	ldr	r2, [pc, #32]	; (8002d1c <HAL_RCC_ClockConfig+0x2f0>)
 8002cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002cfe:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <HAL_RCC_ClockConfig+0x2f4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fd fee8 	bl	8000ad8 <HAL_InitTick>
  
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3778      	adds	r7, #120	; 0x78
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000
 8002d18:	08003898 	.word	0x08003898
 8002d1c:	20000000 	.word	0x20000000
 8002d20:	2000000c 	.word	0x2000000c

08002d24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b08b      	sub	sp, #44	; 0x2c
 8002d28:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61bb      	str	r3, [r7, #24]
 8002d32:	2300      	movs	r3, #0
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002d3e:	4b29      	ldr	r3, [pc, #164]	; (8002de4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d002      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0x30>
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d003      	beq.n	8002d5a <HAL_RCC_GetSysClockFreq+0x36>
 8002d52:	e03c      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d54:	4b24      	ldr	r3, [pc, #144]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d56:	623b      	str	r3, [r7, #32]
      break;
 8002d58:	e03c      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002d60:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002d64:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	fa92 f2a2 	rbit	r2, r2
 8002d6c:	607a      	str	r2, [r7, #4]
  return result;
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	fab2 f282 	clz	r2, r2
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	40d3      	lsrs	r3, r2
 8002d78:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d7a:	5cd3      	ldrb	r3, [r2, r3]
 8002d7c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002d7e:	4b19      	ldr	r3, [pc, #100]	; (8002de4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	220f      	movs	r2, #15
 8002d88:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	fa92 f2a2 	rbit	r2, r2
 8002d90:	60fa      	str	r2, [r7, #12]
  return result;
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	fab2 f282 	clz	r2, r2
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	40d3      	lsrs	r3, r2
 8002d9c:	4a14      	ldr	r2, [pc, #80]	; (8002df0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d9e:	5cd3      	ldrb	r3, [r2, r3]
 8002da0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d008      	beq.n	8002dbe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002dac:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
 8002dbc:	e004      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	4a0c      	ldr	r2, [pc, #48]	; (8002df4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002dc2:	fb02 f303 	mul.w	r3, r2, r3
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	623b      	str	r3, [r7, #32]
      break;
 8002dcc:	e002      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dce:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dd0:	623b      	str	r3, [r7, #32]
      break;
 8002dd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	372c      	adds	r7, #44	; 0x2c
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000
 8002de8:	007a1200 	.word	0x007a1200
 8002dec:	0800401c 	.word	0x0800401c
 8002df0:	0800402c 	.word	0x0800402c
 8002df4:	003d0900 	.word	0x003d0900

08002df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dfc:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	20000000 	.word	0x20000000

08002e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002e16:	f7ff ffef 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 8002e1a:	4601      	mov	r1, r0
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e24:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002e28:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	fa92 f2a2 	rbit	r2, r2
 8002e30:	603a      	str	r2, [r7, #0]
  return result;
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	fab2 f282 	clz	r2, r2
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	40d3      	lsrs	r3, r2
 8002e3c:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002e3e:	5cd3      	ldrb	r3, [r2, r3]
 8002e40:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	080038a8 	.word	0x080038a8

08002e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002e5a:	f7ff ffcd 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 8002e5e:	4601      	mov	r1, r0
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002e68:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002e6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	fa92 f2a2 	rbit	r2, r2
 8002e74:	603a      	str	r2, [r7, #0]
  return result;
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	fab2 f282 	clz	r2, r2
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	40d3      	lsrs	r3, r2
 8002e80:	4a04      	ldr	r2, [pc, #16]	; (8002e94 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002e82:	5cd3      	ldrb	r3, [r2, r3]
 8002e84:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021000 	.word	0x40021000
 8002e94:	080038a8 	.word	0x080038a8

08002e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b092      	sub	sp, #72	; 0x48
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 80cd 	beq.w	8003056 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ebc:	4b86      	ldr	r3, [pc, #536]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10e      	bne.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec8:	4b83      	ldr	r3, [pc, #524]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	4a82      	ldr	r2, [pc, #520]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	61d3      	str	r3, [r2, #28]
 8002ed4:	4b80      	ldr	r3, [pc, #512]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee6:	4b7d      	ldr	r3, [pc, #500]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d118      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ef2:	4b7a      	ldr	r3, [pc, #488]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a79      	ldr	r2, [pc, #484]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002efc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002efe:	f7fd fe2f 	bl	8000b60 <HAL_GetTick>
 8002f02:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f04:	e008      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f06:	f7fd fe2b 	bl	8000b60 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b64      	cmp	r3, #100	; 0x64
 8002f12:	d901      	bls.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e0db      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f18:	4b70      	ldr	r3, [pc, #448]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0f0      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f24:	4b6c      	ldr	r3, [pc, #432]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d07d      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d076      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f42:	4b65      	ldr	r3, [pc, #404]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f50:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f54:	fa93 f3a3 	rbit	r3, r3
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f5c:	fab3 f383 	clz	r3, r3
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	461a      	mov	r2, r3
 8002f64:	4b5e      	ldr	r3, [pc, #376]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f78:	fa93 f3a3 	rbit	r3, r3
 8002f7c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f80:	fab3 f383 	clz	r3, r3
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	461a      	mov	r2, r3
 8002f88:	4b55      	ldr	r3, [pc, #340]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f8a:	4413      	add	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	461a      	mov	r2, r3
 8002f90:	2300      	movs	r3, #0
 8002f92:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f94:	4a50      	ldr	r2, [pc, #320]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f98:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d045      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa4:	f7fd fddc 	bl	8000b60 <HAL_GetTick>
 8002fa8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002faa:	e00a      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fac:	f7fd fdd8 	bl	8000b60 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e086      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc8:	fa93 f3a3 	rbit	r3, r3
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fce:	2302      	movs	r3, #2
 8002fd0:	623b      	str	r3, [r7, #32]
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	fa93 f3a3 	rbit	r3, r3
 8002fd8:	61fb      	str	r3, [r7, #28]
  return result;
 8002fda:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fdc:	fab3 f383 	clz	r3, r3
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	f043 0302 	orr.w	r3, r3, #2
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d102      	bne.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002ff0:	4b39      	ldr	r3, [pc, #228]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	e007      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	fa93 f3a3 	rbit	r3, r3
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	4b35      	ldr	r3, [pc, #212]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	2202      	movs	r2, #2
 8003008:	613a      	str	r2, [r7, #16]
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	fa92 f2a2 	rbit	r2, r2
 8003010:	60fa      	str	r2, [r7, #12]
  return result;
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	fab2 f282 	clz	r2, r2
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	f002 021f 	and.w	r2, r2, #31
 8003024:	2101      	movs	r1, #1
 8003026:	fa01 f202 	lsl.w	r2, r1, r2
 800302a:	4013      	ands	r3, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0bd      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003030:	4b29      	ldr	r3, [pc, #164]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4926      	ldr	r1, [pc, #152]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800303e:	4313      	orrs	r3, r2
 8003040:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003042:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003046:	2b01      	cmp	r3, #1
 8003048:	d105      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800304a:	4b23      	ldr	r3, [pc, #140]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	4a22      	ldr	r2, [pc, #136]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003054:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d008      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003062:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	f023 0203 	bic.w	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	491a      	ldr	r1, [pc, #104]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003070:	4313      	orrs	r3, r2
 8003072:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0320 	and.w	r3, r3, #32
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003080:	4b15      	ldr	r3, [pc, #84]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	f023 0210 	bic.w	r2, r3, #16
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4912      	ldr	r1, [pc, #72]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800308e:	4313      	orrs	r3, r2
 8003090:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800309e:	4b0e      	ldr	r3, [pc, #56]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	490b      	ldr	r1, [pc, #44]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d008      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	4903      	ldr	r1, [pc, #12]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3748      	adds	r7, #72	; 0x48
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40007000 	.word	0x40007000
 80030e0:	10908100 	.word	0x10908100

080030e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e040      	b.n	8003178 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fd f9ec 	bl	80004e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2224      	movs	r2, #36	; 0x24
 8003110:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0201 	bic.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f82c 	bl	8003180 <UART_SetConfig>
 8003128:	4603      	mov	r3, r0
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e022      	b.n	8003178 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f956 	bl	80033ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800314e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800315e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f9dd 	bl	8003530 <UART_CheckIdleState>
 8003176:	4603      	mov	r3, r0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	4b8a      	ldr	r3, [pc, #552]	; (80033d4 <UART_SetConfig+0x254>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6812      	ldr	r2, [r2, #0]
 80031b2:	6979      	ldr	r1, [r7, #20]
 80031b4:	430b      	orrs	r3, r1
 80031b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	4313      	orrs	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a78      	ldr	r2, [pc, #480]	; (80033d8 <UART_SetConfig+0x258>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d120      	bne.n	800323e <UART_SetConfig+0xbe>
 80031fc:	4b77      	ldr	r3, [pc, #476]	; (80033dc <UART_SetConfig+0x25c>)
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	2b03      	cmp	r3, #3
 8003206:	d817      	bhi.n	8003238 <UART_SetConfig+0xb8>
 8003208:	a201      	add	r2, pc, #4	; (adr r2, 8003210 <UART_SetConfig+0x90>)
 800320a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320e:	bf00      	nop
 8003210:	08003221 	.word	0x08003221
 8003214:	0800322d 	.word	0x0800322d
 8003218:	08003233 	.word	0x08003233
 800321c:	08003227 	.word	0x08003227
 8003220:	2300      	movs	r3, #0
 8003222:	77fb      	strb	r3, [r7, #31]
 8003224:	e01d      	b.n	8003262 <UART_SetConfig+0xe2>
 8003226:	2302      	movs	r3, #2
 8003228:	77fb      	strb	r3, [r7, #31]
 800322a:	e01a      	b.n	8003262 <UART_SetConfig+0xe2>
 800322c:	2304      	movs	r3, #4
 800322e:	77fb      	strb	r3, [r7, #31]
 8003230:	e017      	b.n	8003262 <UART_SetConfig+0xe2>
 8003232:	2308      	movs	r3, #8
 8003234:	77fb      	strb	r3, [r7, #31]
 8003236:	e014      	b.n	8003262 <UART_SetConfig+0xe2>
 8003238:	2310      	movs	r3, #16
 800323a:	77fb      	strb	r3, [r7, #31]
 800323c:	e011      	b.n	8003262 <UART_SetConfig+0xe2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a67      	ldr	r2, [pc, #412]	; (80033e0 <UART_SetConfig+0x260>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d102      	bne.n	800324e <UART_SetConfig+0xce>
 8003248:	2300      	movs	r3, #0
 800324a:	77fb      	strb	r3, [r7, #31]
 800324c:	e009      	b.n	8003262 <UART_SetConfig+0xe2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a64      	ldr	r2, [pc, #400]	; (80033e4 <UART_SetConfig+0x264>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d102      	bne.n	800325e <UART_SetConfig+0xde>
 8003258:	2300      	movs	r3, #0
 800325a:	77fb      	strb	r3, [r7, #31]
 800325c:	e001      	b.n	8003262 <UART_SetConfig+0xe2>
 800325e:	2310      	movs	r3, #16
 8003260:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800326a:	d15a      	bne.n	8003322 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800326c:	7ffb      	ldrb	r3, [r7, #31]
 800326e:	2b08      	cmp	r3, #8
 8003270:	d827      	bhi.n	80032c2 <UART_SetConfig+0x142>
 8003272:	a201      	add	r2, pc, #4	; (adr r2, 8003278 <UART_SetConfig+0xf8>)
 8003274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003278:	0800329d 	.word	0x0800329d
 800327c:	080032a5 	.word	0x080032a5
 8003280:	080032ad 	.word	0x080032ad
 8003284:	080032c3 	.word	0x080032c3
 8003288:	080032b3 	.word	0x080032b3
 800328c:	080032c3 	.word	0x080032c3
 8003290:	080032c3 	.word	0x080032c3
 8003294:	080032c3 	.word	0x080032c3
 8003298:	080032bb 	.word	0x080032bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800329c:	f7ff fdb8 	bl	8002e10 <HAL_RCC_GetPCLK1Freq>
 80032a0:	61b8      	str	r0, [r7, #24]
        break;
 80032a2:	e013      	b.n	80032cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032a4:	f7ff fdd6 	bl	8002e54 <HAL_RCC_GetPCLK2Freq>
 80032a8:	61b8      	str	r0, [r7, #24]
        break;
 80032aa:	e00f      	b.n	80032cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032ac:	4b4e      	ldr	r3, [pc, #312]	; (80033e8 <UART_SetConfig+0x268>)
 80032ae:	61bb      	str	r3, [r7, #24]
        break;
 80032b0:	e00c      	b.n	80032cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032b2:	f7ff fd37 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 80032b6:	61b8      	str	r0, [r7, #24]
        break;
 80032b8:	e008      	b.n	80032cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032be:	61bb      	str	r3, [r7, #24]
        break;
 80032c0:	e004      	b.n	80032cc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	77bb      	strb	r3, [r7, #30]
        break;
 80032ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d074      	beq.n	80033bc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	005a      	lsls	r2, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	085b      	lsrs	r3, r3, #1
 80032dc:	441a      	add	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	2b0f      	cmp	r3, #15
 80032ec:	d916      	bls.n	800331c <UART_SetConfig+0x19c>
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f4:	d212      	bcs.n	800331c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	f023 030f 	bic.w	r3, r3, #15
 80032fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	085b      	lsrs	r3, r3, #1
 8003304:	b29b      	uxth	r3, r3
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	b29a      	uxth	r2, r3
 800330c:	89fb      	ldrh	r3, [r7, #14]
 800330e:	4313      	orrs	r3, r2
 8003310:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	89fa      	ldrh	r2, [r7, #14]
 8003318:	60da      	str	r2, [r3, #12]
 800331a:	e04f      	b.n	80033bc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	77bb      	strb	r3, [r7, #30]
 8003320:	e04c      	b.n	80033bc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003322:	7ffb      	ldrb	r3, [r7, #31]
 8003324:	2b08      	cmp	r3, #8
 8003326:	d828      	bhi.n	800337a <UART_SetConfig+0x1fa>
 8003328:	a201      	add	r2, pc, #4	; (adr r2, 8003330 <UART_SetConfig+0x1b0>)
 800332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332e:	bf00      	nop
 8003330:	08003355 	.word	0x08003355
 8003334:	0800335d 	.word	0x0800335d
 8003338:	08003365 	.word	0x08003365
 800333c:	0800337b 	.word	0x0800337b
 8003340:	0800336b 	.word	0x0800336b
 8003344:	0800337b 	.word	0x0800337b
 8003348:	0800337b 	.word	0x0800337b
 800334c:	0800337b 	.word	0x0800337b
 8003350:	08003373 	.word	0x08003373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003354:	f7ff fd5c 	bl	8002e10 <HAL_RCC_GetPCLK1Freq>
 8003358:	61b8      	str	r0, [r7, #24]
        break;
 800335a:	e013      	b.n	8003384 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800335c:	f7ff fd7a 	bl	8002e54 <HAL_RCC_GetPCLK2Freq>
 8003360:	61b8      	str	r0, [r7, #24]
        break;
 8003362:	e00f      	b.n	8003384 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003364:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <UART_SetConfig+0x268>)
 8003366:	61bb      	str	r3, [r7, #24]
        break;
 8003368:	e00c      	b.n	8003384 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800336a:	f7ff fcdb 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 800336e:	61b8      	str	r0, [r7, #24]
        break;
 8003370:	e008      	b.n	8003384 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003376:	61bb      	str	r3, [r7, #24]
        break;
 8003378:	e004      	b.n	8003384 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	77bb      	strb	r3, [r7, #30]
        break;
 8003382:	bf00      	nop
    }

    if (pclk != 0U)
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d018      	beq.n	80033bc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	085a      	lsrs	r2, r3, #1
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	441a      	add	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	fbb2 f3f3 	udiv	r3, r2, r3
 800339c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	2b0f      	cmp	r3, #15
 80033a2:	d909      	bls.n	80033b8 <UART_SetConfig+0x238>
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033aa:	d205      	bcs.n	80033b8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	60da      	str	r2, [r3, #12]
 80033b6:	e001      	b.n	80033bc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80033c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3720      	adds	r7, #32
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	efff69f3 	.word	0xefff69f3
 80033d8:	40013800 	.word	0x40013800
 80033dc:	40021000 	.word	0x40021000
 80033e0:	40004400 	.word	0x40004400
 80033e4:	40004800 	.word	0x40004800
 80033e8:	007a1200 	.word	0x007a1200

080033ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d01a      	beq.n	8003502 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ea:	d10a      	bne.n	8003502 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	605a      	str	r2, [r3, #4]
  }
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b098      	sub	sp, #96	; 0x60
 8003534:	af02      	add	r7, sp, #8
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003540:	f7fd fb0e 	bl	8000b60 <HAL_GetTick>
 8003544:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b08      	cmp	r3, #8
 8003552:	d12e      	bne.n	80035b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003554:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800355c:	2200      	movs	r2, #0
 800355e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f88c 	bl	8003680 <UART_WaitOnFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d021      	beq.n	80035b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003576:	e853 3f00 	ldrex	r3, [r3]
 800357a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800357c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003582:	653b      	str	r3, [r7, #80]	; 0x50
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	461a      	mov	r2, r3
 800358a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800358c:	647b      	str	r3, [r7, #68]	; 0x44
 800358e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003590:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003592:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003594:	e841 2300 	strex	r3, r2, [r1]
 8003598:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800359a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1e6      	bne.n	800356e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2220      	movs	r2, #32
 80035a4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e062      	b.n	8003678 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d149      	bne.n	8003654 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c8:	2200      	movs	r2, #0
 80035ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f856 	bl	8003680 <UART_WaitOnFlagUntilTimeout>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d03c      	beq.n	8003654 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	e853 3f00 	ldrex	r3, [r3]
 80035e6:	623b      	str	r3, [r7, #32]
   return(result);
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f8:	633b      	str	r3, [r7, #48]	; 0x30
 80035fa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003600:	e841 2300 	strex	r3, r2, [r1]
 8003604:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1e6      	bne.n	80035da <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3308      	adds	r3, #8
 8003612:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	e853 3f00 	ldrex	r3, [r3]
 800361a:	60fb      	str	r3, [r7, #12]
   return(result);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 0301 	bic.w	r3, r3, #1
 8003622:	64bb      	str	r3, [r7, #72]	; 0x48
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3308      	adds	r3, #8
 800362a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800362c:	61fa      	str	r2, [r7, #28]
 800362e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003630:	69b9      	ldr	r1, [r7, #24]
 8003632:	69fa      	ldr	r2, [r7, #28]
 8003634:	e841 2300 	strex	r3, r2, [r1]
 8003638:	617b      	str	r3, [r7, #20]
   return(result);
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1e5      	bne.n	800360c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2220      	movs	r2, #32
 8003644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e011      	b.n	8003678 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2220      	movs	r2, #32
 800365e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3758      	adds	r7, #88	; 0x58
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	4613      	mov	r3, r2
 800368e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003690:	e049      	b.n	8003726 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003698:	d045      	beq.n	8003726 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369a:	f7fd fa61 	bl	8000b60 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d302      	bcc.n	80036b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e048      	b.n	8003746 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d031      	beq.n	8003726 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d110      	bne.n	80036f2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2208      	movs	r2, #8
 80036d6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 f838 	bl	800374e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2208      	movs	r2, #8
 80036e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e029      	b.n	8003746 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003700:	d111      	bne.n	8003726 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800370a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 f81e 	bl	800374e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2220      	movs	r2, #32
 8003716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e00f      	b.n	8003746 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	69da      	ldr	r2, [r3, #28]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4013      	ands	r3, r2
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	429a      	cmp	r2, r3
 8003734:	bf0c      	ite	eq
 8003736:	2301      	moveq	r3, #1
 8003738:	2300      	movne	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	461a      	mov	r2, r3
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	429a      	cmp	r2, r3
 8003742:	d0a6      	beq.n	8003692 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800374e:	b480      	push	{r7}
 8003750:	b095      	sub	sp, #84	; 0x54
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800375e:	e853 3f00 	ldrex	r3, [r3]
 8003762:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003766:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800376a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003774:	643b      	str	r3, [r7, #64]	; 0x40
 8003776:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003778:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800377a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800377c:	e841 2300 	strex	r3, r2, [r1]
 8003780:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1e6      	bne.n	8003756 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	3308      	adds	r3, #8
 800378e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	e853 3f00 	ldrex	r3, [r3]
 8003796:	61fb      	str	r3, [r7, #28]
   return(result);
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f023 0301 	bic.w	r3, r3, #1
 800379e:	64bb      	str	r3, [r7, #72]	; 0x48
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3308      	adds	r3, #8
 80037a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037b0:	e841 2300 	strex	r3, r2, [r1]
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1e5      	bne.n	8003788 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d118      	bne.n	80037f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	e853 3f00 	ldrex	r3, [r3]
 80037d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f023 0310 	bic.w	r3, r3, #16
 80037d8:	647b      	str	r3, [r7, #68]	; 0x44
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	461a      	mov	r2, r3
 80037e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037e2:	61bb      	str	r3, [r7, #24]
 80037e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e6:	6979      	ldr	r1, [r7, #20]
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	e841 2300 	strex	r3, r2, [r1]
 80037ee:	613b      	str	r3, [r7, #16]
   return(result);
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1e6      	bne.n	80037c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	669a      	str	r2, [r3, #104]	; 0x68
}
 800380a:	bf00      	nop
 800380c:	3754      	adds	r7, #84	; 0x54
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
	...

08003818 <__libc_init_array>:
 8003818:	b570      	push	{r4, r5, r6, lr}
 800381a:	4d0d      	ldr	r5, [pc, #52]	; (8003850 <__libc_init_array+0x38>)
 800381c:	4c0d      	ldr	r4, [pc, #52]	; (8003854 <__libc_init_array+0x3c>)
 800381e:	1b64      	subs	r4, r4, r5
 8003820:	10a4      	asrs	r4, r4, #2
 8003822:	2600      	movs	r6, #0
 8003824:	42a6      	cmp	r6, r4
 8003826:	d109      	bne.n	800383c <__libc_init_array+0x24>
 8003828:	4d0b      	ldr	r5, [pc, #44]	; (8003858 <__libc_init_array+0x40>)
 800382a:	4c0c      	ldr	r4, [pc, #48]	; (800385c <__libc_init_array+0x44>)
 800382c:	f000 f820 	bl	8003870 <_init>
 8003830:	1b64      	subs	r4, r4, r5
 8003832:	10a4      	asrs	r4, r4, #2
 8003834:	2600      	movs	r6, #0
 8003836:	42a6      	cmp	r6, r4
 8003838:	d105      	bne.n	8003846 <__libc_init_array+0x2e>
 800383a:	bd70      	pop	{r4, r5, r6, pc}
 800383c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003840:	4798      	blx	r3
 8003842:	3601      	adds	r6, #1
 8003844:	e7ee      	b.n	8003824 <__libc_init_array+0xc>
 8003846:	f855 3b04 	ldr.w	r3, [r5], #4
 800384a:	4798      	blx	r3
 800384c:	3601      	adds	r6, #1
 800384e:	e7f2      	b.n	8003836 <__libc_init_array+0x1e>
 8003850:	0800403c 	.word	0x0800403c
 8003854:	0800403c 	.word	0x0800403c
 8003858:	0800403c 	.word	0x0800403c
 800385c:	08004040 	.word	0x08004040

08003860 <memset>:
 8003860:	4402      	add	r2, r0
 8003862:	4603      	mov	r3, r0
 8003864:	4293      	cmp	r3, r2
 8003866:	d100      	bne.n	800386a <memset+0xa>
 8003868:	4770      	bx	lr
 800386a:	f803 1b01 	strb.w	r1, [r3], #1
 800386e:	e7f9      	b.n	8003864 <memset+0x4>

08003870 <_init>:
 8003870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003872:	bf00      	nop
 8003874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003876:	bc08      	pop	{r3}
 8003878:	469e      	mov	lr, r3
 800387a:	4770      	bx	lr

0800387c <_fini>:
 800387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387e:	bf00      	nop
 8003880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003882:	bc08      	pop	{r3}
 8003884:	469e      	mov	lr, r3
 8003886:	4770      	bx	lr
